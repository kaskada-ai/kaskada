// Code generated by mockery v2.27.1. DO NOT EDIT.

package internal

import (
	context "context"

	ent "github.com/kaskada-ai/kaskada/wren/ent"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockKaskadaQueryClient is an autogenerated mock type for the KaskadaQueryClient type
type MockKaskadaQueryClient struct {
	mock.Mock
}

type MockKaskadaQueryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKaskadaQueryClient) EXPECT() *MockKaskadaQueryClient_Expecter {
	return &MockKaskadaQueryClient_Expecter{mock: &_m.Mock}
}

// CreateKaskadaQuery provides a mock function with given fields: ctx, owner, newQuery, isV2
func (_m *MockKaskadaQueryClient) CreateKaskadaQuery(ctx context.Context, owner *ent.Owner, newQuery *ent.KaskadaQuery, isV2 bool) (*ent.KaskadaQuery, error) {
	ret := _m.Called(ctx, owner, newQuery, isV2)

	var r0 *ent.KaskadaQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, *ent.KaskadaQuery, bool) (*ent.KaskadaQuery, error)); ok {
		return rf(ctx, owner, newQuery, isV2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, *ent.KaskadaQuery, bool) *ent.KaskadaQuery); ok {
		r0 = rf(ctx, owner, newQuery, isV2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.KaskadaQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, *ent.KaskadaQuery, bool) error); ok {
		r1 = rf(ctx, owner, newQuery, isV2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKaskadaQueryClient_CreateKaskadaQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKaskadaQuery'
type MockKaskadaQueryClient_CreateKaskadaQuery_Call struct {
	*mock.Call
}

// CreateKaskadaQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - newQuery *ent.KaskadaQuery
//   - isV2 bool
func (_e *MockKaskadaQueryClient_Expecter) CreateKaskadaQuery(ctx interface{}, owner interface{}, newQuery interface{}, isV2 interface{}) *MockKaskadaQueryClient_CreateKaskadaQuery_Call {
	return &MockKaskadaQueryClient_CreateKaskadaQuery_Call{Call: _e.mock.On("CreateKaskadaQuery", ctx, owner, newQuery, isV2)}
}

func (_c *MockKaskadaQueryClient_CreateKaskadaQuery_Call) Run(run func(ctx context.Context, owner *ent.Owner, newQuery *ent.KaskadaQuery, isV2 bool)) *MockKaskadaQueryClient_CreateKaskadaQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(*ent.KaskadaQuery), args[3].(bool))
	})
	return _c
}

func (_c *MockKaskadaQueryClient_CreateKaskadaQuery_Call) Return(_a0 *ent.KaskadaQuery, _a1 error) *MockKaskadaQueryClient_CreateKaskadaQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKaskadaQueryClient_CreateKaskadaQuery_Call) RunAndReturn(run func(context.Context, *ent.Owner, *ent.KaskadaQuery, bool) (*ent.KaskadaQuery, error)) *MockKaskadaQueryClient_CreateKaskadaQuery_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKaskadaQuery provides a mock function with given fields: ctx, owner, id, isV2
func (_m *MockKaskadaQueryClient) DeleteKaskadaQuery(ctx context.Context, owner *ent.Owner, id uuid.UUID, isV2 bool) error {
	ret := _m.Called(ctx, owner, id, isV2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, uuid.UUID, bool) error); ok {
		r0 = rf(ctx, owner, id, isV2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKaskadaQueryClient_DeleteKaskadaQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKaskadaQuery'
type MockKaskadaQueryClient_DeleteKaskadaQuery_Call struct {
	*mock.Call
}

// DeleteKaskadaQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - id uuid.UUID
//   - isV2 bool
func (_e *MockKaskadaQueryClient_Expecter) DeleteKaskadaQuery(ctx interface{}, owner interface{}, id interface{}, isV2 interface{}) *MockKaskadaQueryClient_DeleteKaskadaQuery_Call {
	return &MockKaskadaQueryClient_DeleteKaskadaQuery_Call{Call: _e.mock.On("DeleteKaskadaQuery", ctx, owner, id, isV2)}
}

func (_c *MockKaskadaQueryClient_DeleteKaskadaQuery_Call) Run(run func(ctx context.Context, owner *ent.Owner, id uuid.UUID, isV2 bool)) *MockKaskadaQueryClient_DeleteKaskadaQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(uuid.UUID), args[3].(bool))
	})
	return _c
}

func (_c *MockKaskadaQueryClient_DeleteKaskadaQuery_Call) Return(_a0 error) *MockKaskadaQueryClient_DeleteKaskadaQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKaskadaQueryClient_DeleteKaskadaQuery_Call) RunAndReturn(run func(context.Context, *ent.Owner, uuid.UUID, bool) error) *MockKaskadaQueryClient_DeleteKaskadaQuery_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllKaskadaQueries provides a mock function with given fields: ctx, owner, isV2
func (_m *MockKaskadaQueryClient) GetAllKaskadaQueries(ctx context.Context, owner *ent.Owner, isV2 bool) ([]*ent.KaskadaQuery, error) {
	ret := _m.Called(ctx, owner, isV2)

	var r0 []*ent.KaskadaQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, bool) ([]*ent.KaskadaQuery, error)); ok {
		return rf(ctx, owner, isV2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, bool) []*ent.KaskadaQuery); ok {
		r0 = rf(ctx, owner, isV2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.KaskadaQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, bool) error); ok {
		r1 = rf(ctx, owner, isV2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKaskadaQueryClient_GetAllKaskadaQueries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllKaskadaQueries'
type MockKaskadaQueryClient_GetAllKaskadaQueries_Call struct {
	*mock.Call
}

// GetAllKaskadaQueries is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - isV2 bool
func (_e *MockKaskadaQueryClient_Expecter) GetAllKaskadaQueries(ctx interface{}, owner interface{}, isV2 interface{}) *MockKaskadaQueryClient_GetAllKaskadaQueries_Call {
	return &MockKaskadaQueryClient_GetAllKaskadaQueries_Call{Call: _e.mock.On("GetAllKaskadaQueries", ctx, owner, isV2)}
}

func (_c *MockKaskadaQueryClient_GetAllKaskadaQueries_Call) Run(run func(ctx context.Context, owner *ent.Owner, isV2 bool)) *MockKaskadaQueryClient_GetAllKaskadaQueries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(bool))
	})
	return _c
}

func (_c *MockKaskadaQueryClient_GetAllKaskadaQueries_Call) Return(_a0 []*ent.KaskadaQuery, _a1 error) *MockKaskadaQueryClient_GetAllKaskadaQueries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKaskadaQueryClient_GetAllKaskadaQueries_Call) RunAndReturn(run func(context.Context, *ent.Owner, bool) ([]*ent.KaskadaQuery, error)) *MockKaskadaQueryClient_GetAllKaskadaQueries_Call {
	_c.Call.Return(run)
	return _c
}

// GetKaskadaQuery provides a mock function with given fields: ctx, owner, id, isV2
func (_m *MockKaskadaQueryClient) GetKaskadaQuery(ctx context.Context, owner *ent.Owner, id uuid.UUID, isV2 bool) (*ent.KaskadaQuery, error) {
	ret := _m.Called(ctx, owner, id, isV2)

	var r0 *ent.KaskadaQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, uuid.UUID, bool) (*ent.KaskadaQuery, error)); ok {
		return rf(ctx, owner, id, isV2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, uuid.UUID, bool) *ent.KaskadaQuery); ok {
		r0 = rf(ctx, owner, id, isV2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.KaskadaQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, uuid.UUID, bool) error); ok {
		r1 = rf(ctx, owner, id, isV2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKaskadaQueryClient_GetKaskadaQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKaskadaQuery'
type MockKaskadaQueryClient_GetKaskadaQuery_Call struct {
	*mock.Call
}

// GetKaskadaQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - id uuid.UUID
//   - isV2 bool
func (_e *MockKaskadaQueryClient_Expecter) GetKaskadaQuery(ctx interface{}, owner interface{}, id interface{}, isV2 interface{}) *MockKaskadaQueryClient_GetKaskadaQuery_Call {
	return &MockKaskadaQueryClient_GetKaskadaQuery_Call{Call: _e.mock.On("GetKaskadaQuery", ctx, owner, id, isV2)}
}

func (_c *MockKaskadaQueryClient_GetKaskadaQuery_Call) Run(run func(ctx context.Context, owner *ent.Owner, id uuid.UUID, isV2 bool)) *MockKaskadaQueryClient_GetKaskadaQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(uuid.UUID), args[3].(bool))
	})
	return _c
}

func (_c *MockKaskadaQueryClient_GetKaskadaQuery_Call) Return(_a0 *ent.KaskadaQuery, _a1 error) *MockKaskadaQueryClient_GetKaskadaQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKaskadaQueryClient_GetKaskadaQuery_Call) RunAndReturn(run func(context.Context, *ent.Owner, uuid.UUID, bool) (*ent.KaskadaQuery, error)) *MockKaskadaQueryClient_GetKaskadaQuery_Call {
	_c.Call.Return(run)
	return _c
}

// ListKaskadaQueries provides a mock function with given fields: ctx, owner, searchTerm, pageSize, offset, isV2
func (_m *MockKaskadaQueryClient) ListKaskadaQueries(ctx context.Context, owner *ent.Owner, searchTerm string, pageSize int, offset int, isV2 bool) ([]*ent.KaskadaQuery, error) {
	ret := _m.Called(ctx, owner, searchTerm, pageSize, offset, isV2)

	var r0 []*ent.KaskadaQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string, int, int, bool) ([]*ent.KaskadaQuery, error)); ok {
		return rf(ctx, owner, searchTerm, pageSize, offset, isV2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string, int, int, bool) []*ent.KaskadaQuery); ok {
		r0 = rf(ctx, owner, searchTerm, pageSize, offset, isV2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.KaskadaQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, string, int, int, bool) error); ok {
		r1 = rf(ctx, owner, searchTerm, pageSize, offset, isV2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKaskadaQueryClient_ListKaskadaQueries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKaskadaQueries'
type MockKaskadaQueryClient_ListKaskadaQueries_Call struct {
	*mock.Call
}

// ListKaskadaQueries is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - searchTerm string
//   - pageSize int
//   - offset int
//   - isV2 bool
func (_e *MockKaskadaQueryClient_Expecter) ListKaskadaQueries(ctx interface{}, owner interface{}, searchTerm interface{}, pageSize interface{}, offset interface{}, isV2 interface{}) *MockKaskadaQueryClient_ListKaskadaQueries_Call {
	return &MockKaskadaQueryClient_ListKaskadaQueries_Call{Call: _e.mock.On("ListKaskadaQueries", ctx, owner, searchTerm, pageSize, offset, isV2)}
}

func (_c *MockKaskadaQueryClient_ListKaskadaQueries_Call) Run(run func(ctx context.Context, owner *ent.Owner, searchTerm string, pageSize int, offset int, isV2 bool)) *MockKaskadaQueryClient_ListKaskadaQueries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(string), args[3].(int), args[4].(int), args[5].(bool))
	})
	return _c
}

func (_c *MockKaskadaQueryClient_ListKaskadaQueries_Call) Return(_a0 []*ent.KaskadaQuery, _a1 error) *MockKaskadaQueryClient_ListKaskadaQueries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKaskadaQueryClient_ListKaskadaQueries_Call) RunAndReturn(run func(context.Context, *ent.Owner, string, int, int, bool) ([]*ent.KaskadaQuery, error)) *MockKaskadaQueryClient_ListKaskadaQueries_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockKaskadaQueryClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockKaskadaQueryClient creates a new instance of MockKaskadaQueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockKaskadaQueryClient(t mockConstructorTestingTNewMockKaskadaQueryClient) *MockKaskadaQueryClient {
	mock := &MockKaskadaQueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
