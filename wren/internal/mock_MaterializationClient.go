// Code generated by mockery v2.27.1. DO NOT EDIT.

package internal

import (
	context "context"

	ent "github.com/kaskada-ai/kaskada/wren/ent"
	materialization "github.com/kaskada-ai/kaskada/wren/ent/materialization"

	mock "github.com/stretchr/testify/mock"

	schema "github.com/kaskada-ai/kaskada/wren/ent/schema"

	uuid "github.com/google/uuid"
)

// MockMaterializationClient is an autogenerated mock type for the MaterializationClient type
type MockMaterializationClient struct {
	mock.Mock
}

type MockMaterializationClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMaterializationClient) EXPECT() *MockMaterializationClient_Expecter {
	return &MockMaterializationClient_Expecter{mock: &_m.Mock}
}

// CreateMaterialization provides a mock function with given fields: ctx, owner, newMaterialization, dependencies
func (_m *MockMaterializationClient) CreateMaterialization(ctx context.Context, owner *ent.Owner, newMaterialization *ent.Materialization, dependencies []*ent.MaterializationDependency) (*ent.Materialization, error) {
	ret := _m.Called(ctx, owner, newMaterialization, dependencies)

	var r0 *ent.Materialization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, *ent.Materialization, []*ent.MaterializationDependency) (*ent.Materialization, error)); ok {
		return rf(ctx, owner, newMaterialization, dependencies)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, *ent.Materialization, []*ent.MaterializationDependency) *ent.Materialization); ok {
		r0 = rf(ctx, owner, newMaterialization, dependencies)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Materialization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, *ent.Materialization, []*ent.MaterializationDependency) error); ok {
		r1 = rf(ctx, owner, newMaterialization, dependencies)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializationClient_CreateMaterialization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMaterialization'
type MockMaterializationClient_CreateMaterialization_Call struct {
	*mock.Call
}

// CreateMaterialization is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - newMaterialization *ent.Materialization
//   - dependencies []*ent.MaterializationDependency
func (_e *MockMaterializationClient_Expecter) CreateMaterialization(ctx interface{}, owner interface{}, newMaterialization interface{}, dependencies interface{}) *MockMaterializationClient_CreateMaterialization_Call {
	return &MockMaterializationClient_CreateMaterialization_Call{Call: _e.mock.On("CreateMaterialization", ctx, owner, newMaterialization, dependencies)}
}

func (_c *MockMaterializationClient_CreateMaterialization_Call) Run(run func(ctx context.Context, owner *ent.Owner, newMaterialization *ent.Materialization, dependencies []*ent.MaterializationDependency)) *MockMaterializationClient_CreateMaterialization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(*ent.Materialization), args[3].([]*ent.MaterializationDependency))
	})
	return _c
}

func (_c *MockMaterializationClient_CreateMaterialization_Call) Return(_a0 *ent.Materialization, _a1 error) *MockMaterializationClient_CreateMaterialization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializationClient_CreateMaterialization_Call) RunAndReturn(run func(context.Context, *ent.Owner, *ent.Materialization, []*ent.MaterializationDependency) (*ent.Materialization, error)) *MockMaterializationClient_CreateMaterialization_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMaterialization provides a mock function with given fields: ctx, owner, view
func (_m *MockMaterializationClient) DeleteMaterialization(ctx context.Context, owner *ent.Owner, view *ent.Materialization) error {
	ret := _m.Called(ctx, owner, view)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, *ent.Materialization) error); ok {
		r0 = rf(ctx, owner, view)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMaterializationClient_DeleteMaterialization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMaterialization'
type MockMaterializationClient_DeleteMaterialization_Call struct {
	*mock.Call
}

// DeleteMaterialization is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - view *ent.Materialization
func (_e *MockMaterializationClient_Expecter) DeleteMaterialization(ctx interface{}, owner interface{}, view interface{}) *MockMaterializationClient_DeleteMaterialization_Call {
	return &MockMaterializationClient_DeleteMaterialization_Call{Call: _e.mock.On("DeleteMaterialization", ctx, owner, view)}
}

func (_c *MockMaterializationClient_DeleteMaterialization_Call) Run(run func(ctx context.Context, owner *ent.Owner, view *ent.Materialization)) *MockMaterializationClient_DeleteMaterialization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(*ent.Materialization))
	})
	return _c
}

func (_c *MockMaterializationClient_DeleteMaterialization_Call) Return(_a0 error) *MockMaterializationClient_DeleteMaterialization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMaterializationClient_DeleteMaterialization_Call) RunAndReturn(run func(context.Context, *ent.Owner, *ent.Materialization) error) *MockMaterializationClient_DeleteMaterialization_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMaterializations provides a mock function with given fields: ctx, owner
func (_m *MockMaterializationClient) GetAllMaterializations(ctx context.Context, owner *ent.Owner) ([]*ent.Materialization, error) {
	ret := _m.Called(ctx, owner)

	var r0 []*ent.Materialization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner) ([]*ent.Materialization, error)); ok {
		return rf(ctx, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner) []*ent.Materialization); ok {
		r0 = rf(ctx, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Materialization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner) error); ok {
		r1 = rf(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializationClient_GetAllMaterializations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMaterializations'
type MockMaterializationClient_GetAllMaterializations_Call struct {
	*mock.Call
}

// GetAllMaterializations is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
func (_e *MockMaterializationClient_Expecter) GetAllMaterializations(ctx interface{}, owner interface{}) *MockMaterializationClient_GetAllMaterializations_Call {
	return &MockMaterializationClient_GetAllMaterializations_Call{Call: _e.mock.On("GetAllMaterializations", ctx, owner)}
}

func (_c *MockMaterializationClient_GetAllMaterializations_Call) Run(run func(ctx context.Context, owner *ent.Owner)) *MockMaterializationClient_GetAllMaterializations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner))
	})
	return _c
}

func (_c *MockMaterializationClient_GetAllMaterializations_Call) Return(_a0 []*ent.Materialization, _a1 error) *MockMaterializationClient_GetAllMaterializations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializationClient_GetAllMaterializations_Call) RunAndReturn(run func(context.Context, *ent.Owner) ([]*ent.Materialization, error)) *MockMaterializationClient_GetAllMaterializations_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaterialization provides a mock function with given fields: ctx, owner, id
func (_m *MockMaterializationClient) GetMaterialization(ctx context.Context, owner *ent.Owner, id uuid.UUID) (*ent.Materialization, error) {
	ret := _m.Called(ctx, owner, id)

	var r0 *ent.Materialization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, uuid.UUID) (*ent.Materialization, error)); ok {
		return rf(ctx, owner, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, uuid.UUID) *ent.Materialization); ok {
		r0 = rf(ctx, owner, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Materialization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, uuid.UUID) error); ok {
		r1 = rf(ctx, owner, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializationClient_GetMaterialization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaterialization'
type MockMaterializationClient_GetMaterialization_Call struct {
	*mock.Call
}

// GetMaterialization is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - id uuid.UUID
func (_e *MockMaterializationClient_Expecter) GetMaterialization(ctx interface{}, owner interface{}, id interface{}) *MockMaterializationClient_GetMaterialization_Call {
	return &MockMaterializationClient_GetMaterialization_Call{Call: _e.mock.On("GetMaterialization", ctx, owner, id)}
}

func (_c *MockMaterializationClient_GetMaterialization_Call) Run(run func(ctx context.Context, owner *ent.Owner, id uuid.UUID)) *MockMaterializationClient_GetMaterialization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockMaterializationClient_GetMaterialization_Call) Return(_a0 *ent.Materialization, _a1 error) *MockMaterializationClient_GetMaterialization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializationClient_GetMaterialization_Call) RunAndReturn(run func(context.Context, *ent.Owner, uuid.UUID) (*ent.Materialization, error)) *MockMaterializationClient_GetMaterialization_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaterializationByName provides a mock function with given fields: ctx, owner, name
func (_m *MockMaterializationClient) GetMaterializationByName(ctx context.Context, owner *ent.Owner, name string) (*ent.Materialization, error) {
	ret := _m.Called(ctx, owner, name)

	var r0 *ent.Materialization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string) (*ent.Materialization, error)); ok {
		return rf(ctx, owner, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string) *ent.Materialization); ok {
		r0 = rf(ctx, owner, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Materialization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, string) error); ok {
		r1 = rf(ctx, owner, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializationClient_GetMaterializationByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaterializationByName'
type MockMaterializationClient_GetMaterializationByName_Call struct {
	*mock.Call
}

// GetMaterializationByName is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - name string
func (_e *MockMaterializationClient_Expecter) GetMaterializationByName(ctx interface{}, owner interface{}, name interface{}) *MockMaterializationClient_GetMaterializationByName_Call {
	return &MockMaterializationClient_GetMaterializationByName_Call{Call: _e.mock.On("GetMaterializationByName", ctx, owner, name)}
}

func (_c *MockMaterializationClient_GetMaterializationByName_Call) Run(run func(ctx context.Context, owner *ent.Owner, name string)) *MockMaterializationClient_GetMaterializationByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(string))
	})
	return _c
}

func (_c *MockMaterializationClient_GetMaterializationByName_Call) Return(_a0 *ent.Materialization, _a1 error) *MockMaterializationClient_GetMaterializationByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializationClient_GetMaterializationByName_Call) RunAndReturn(run func(context.Context, *ent.Owner, string) (*ent.Materialization, error)) *MockMaterializationClient_GetMaterializationByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaterializationsBySourceType provides a mock function with given fields: ctx, owner, sourceType
func (_m *MockMaterializationClient) GetMaterializationsBySourceType(ctx context.Context, owner *ent.Owner, sourceType materialization.SourceType) ([]*ent.Materialization, error) {
	ret := _m.Called(ctx, owner, sourceType)

	var r0 []*ent.Materialization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, materialization.SourceType) ([]*ent.Materialization, error)); ok {
		return rf(ctx, owner, sourceType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, materialization.SourceType) []*ent.Materialization); ok {
		r0 = rf(ctx, owner, sourceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Materialization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, materialization.SourceType) error); ok {
		r1 = rf(ctx, owner, sourceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializationClient_GetMaterializationsBySourceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaterializationsBySourceType'
type MockMaterializationClient_GetMaterializationsBySourceType_Call struct {
	*mock.Call
}

// GetMaterializationsBySourceType is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - sourceType materialization.SourceType
func (_e *MockMaterializationClient_Expecter) GetMaterializationsBySourceType(ctx interface{}, owner interface{}, sourceType interface{}) *MockMaterializationClient_GetMaterializationsBySourceType_Call {
	return &MockMaterializationClient_GetMaterializationsBySourceType_Call{Call: _e.mock.On("GetMaterializationsBySourceType", ctx, owner, sourceType)}
}

func (_c *MockMaterializationClient_GetMaterializationsBySourceType_Call) Run(run func(ctx context.Context, owner *ent.Owner, sourceType materialization.SourceType)) *MockMaterializationClient_GetMaterializationsBySourceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(materialization.SourceType))
	})
	return _c
}

func (_c *MockMaterializationClient_GetMaterializationsBySourceType_Call) Return(_a0 []*ent.Materialization, _a1 error) *MockMaterializationClient_GetMaterializationsBySourceType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializationClient_GetMaterializationsBySourceType_Call) RunAndReturn(run func(context.Context, *ent.Owner, materialization.SourceType) ([]*ent.Materialization, error)) *MockMaterializationClient_GetMaterializationsBySourceType_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaterializationsWithDependency provides a mock function with given fields: ctx, owner, name, dependencyType
func (_m *MockMaterializationClient) GetMaterializationsWithDependency(ctx context.Context, owner *ent.Owner, name string, dependencyType schema.DependencyType) ([]*ent.Materialization, error) {
	ret := _m.Called(ctx, owner, name, dependencyType)

	var r0 []*ent.Materialization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string, schema.DependencyType) ([]*ent.Materialization, error)); ok {
		return rf(ctx, owner, name, dependencyType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string, schema.DependencyType) []*ent.Materialization); ok {
		r0 = rf(ctx, owner, name, dependencyType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Materialization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, string, schema.DependencyType) error); ok {
		r1 = rf(ctx, owner, name, dependencyType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializationClient_GetMaterializationsWithDependency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaterializationsWithDependency'
type MockMaterializationClient_GetMaterializationsWithDependency_Call struct {
	*mock.Call
}

// GetMaterializationsWithDependency is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - name string
//   - dependencyType schema.DependencyType
func (_e *MockMaterializationClient_Expecter) GetMaterializationsWithDependency(ctx interface{}, owner interface{}, name interface{}, dependencyType interface{}) *MockMaterializationClient_GetMaterializationsWithDependency_Call {
	return &MockMaterializationClient_GetMaterializationsWithDependency_Call{Call: _e.mock.On("GetMaterializationsWithDependency", ctx, owner, name, dependencyType)}
}

func (_c *MockMaterializationClient_GetMaterializationsWithDependency_Call) Run(run func(ctx context.Context, owner *ent.Owner, name string, dependencyType schema.DependencyType)) *MockMaterializationClient_GetMaterializationsWithDependency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(string), args[3].(schema.DependencyType))
	})
	return _c
}

func (_c *MockMaterializationClient_GetMaterializationsWithDependency_Call) Return(_a0 []*ent.Materialization, _a1 error) *MockMaterializationClient_GetMaterializationsWithDependency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializationClient_GetMaterializationsWithDependency_Call) RunAndReturn(run func(context.Context, *ent.Owner, string, schema.DependencyType) ([]*ent.Materialization, error)) *MockMaterializationClient_GetMaterializationsWithDependency_Call {
	_c.Call.Return(run)
	return _c
}

// ListMaterializations provides a mock function with given fields: ctx, owner, searchTerm, pageSize, offset
func (_m *MockMaterializationClient) ListMaterializations(ctx context.Context, owner *ent.Owner, searchTerm string, pageSize int, offset int) ([]*ent.Materialization, error) {
	ret := _m.Called(ctx, owner, searchTerm, pageSize, offset)

	var r0 []*ent.Materialization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string, int, int) ([]*ent.Materialization, error)); ok {
		return rf(ctx, owner, searchTerm, pageSize, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string, int, int) []*ent.Materialization); ok {
		r0 = rf(ctx, owner, searchTerm, pageSize, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Materialization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, string, int, int) error); ok {
		r1 = rf(ctx, owner, searchTerm, pageSize, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializationClient_ListMaterializations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMaterializations'
type MockMaterializationClient_ListMaterializations_Call struct {
	*mock.Call
}

// ListMaterializations is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - searchTerm string
//   - pageSize int
//   - offset int
func (_e *MockMaterializationClient_Expecter) ListMaterializations(ctx interface{}, owner interface{}, searchTerm interface{}, pageSize interface{}, offset interface{}) *MockMaterializationClient_ListMaterializations_Call {
	return &MockMaterializationClient_ListMaterializations_Call{Call: _e.mock.On("ListMaterializations", ctx, owner, searchTerm, pageSize, offset)}
}

func (_c *MockMaterializationClient_ListMaterializations_Call) Run(run func(ctx context.Context, owner *ent.Owner, searchTerm string, pageSize int, offset int)) *MockMaterializationClient_ListMaterializations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(string), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *MockMaterializationClient_ListMaterializations_Call) Return(_a0 []*ent.Materialization, _a1 error) *MockMaterializationClient_ListMaterializations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializationClient_ListMaterializations_Call) RunAndReturn(run func(context.Context, *ent.Owner, string, int, int) ([]*ent.Materialization, error)) *MockMaterializationClient_ListMaterializations_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDataVersion provides a mock function with given fields: ctx, _a1, newDataVersion
func (_m *MockMaterializationClient) UpdateDataVersion(ctx context.Context, _a1 *ent.Materialization, newDataVersion int64) (*ent.Materialization, error) {
	ret := _m.Called(ctx, _a1, newDataVersion)

	var r0 *ent.Materialization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Materialization, int64) (*ent.Materialization, error)); ok {
		return rf(ctx, _a1, newDataVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Materialization, int64) *ent.Materialization); ok {
		r0 = rf(ctx, _a1, newDataVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Materialization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Materialization, int64) error); ok {
		r1 = rf(ctx, _a1, newDataVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMaterializationClient_UpdateDataVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDataVersion'
type MockMaterializationClient_UpdateDataVersion_Call struct {
	*mock.Call
}

// UpdateDataVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *ent.Materialization
//   - newDataVersion int64
func (_e *MockMaterializationClient_Expecter) UpdateDataVersion(ctx interface{}, _a1 interface{}, newDataVersion interface{}) *MockMaterializationClient_UpdateDataVersion_Call {
	return &MockMaterializationClient_UpdateDataVersion_Call{Call: _e.mock.On("UpdateDataVersion", ctx, _a1, newDataVersion)}
}

func (_c *MockMaterializationClient_UpdateDataVersion_Call) Run(run func(ctx context.Context, _a1 *ent.Materialization, newDataVersion int64)) *MockMaterializationClient_UpdateDataVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Materialization), args[2].(int64))
	})
	return _c
}

func (_c *MockMaterializationClient_UpdateDataVersion_Call) Return(_a0 *ent.Materialization, _a1 error) *MockMaterializationClient_UpdateDataVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMaterializationClient_UpdateDataVersion_Call) RunAndReturn(run func(context.Context, *ent.Materialization, int64) (*ent.Materialization, error)) *MockMaterializationClient_UpdateDataVersion_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockMaterializationClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMaterializationClient creates a new instance of MockMaterializationClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMaterializationClient(t mockConstructorTestingTNewMockMaterializationClient) *MockMaterializationClient {
	mock := &MockMaterializationClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
