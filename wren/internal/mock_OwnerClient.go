// Code generated by mockery v2.27.1. DO NOT EDIT.

package internal

import (
	context "context"

	ent "github.com/kaskada-ai/kaskada/wren/ent"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockOwnerClient is an autogenerated mock type for the OwnerClient type
type MockOwnerClient struct {
	mock.Mock
}

type MockOwnerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOwnerClient) EXPECT() *MockOwnerClient_Expecter {
	return &MockOwnerClient_Expecter{mock: &_m.Mock}
}

// GetOwner provides a mock function with given fields: ctx, id
func (_m *MockOwnerClient) GetOwner(ctx context.Context, id uuid.UUID) (*ent.Owner, error) {
	ret := _m.Called(ctx, id)

	var r0 *ent.Owner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ent.Owner, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.Owner); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Owner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOwnerClient_GetOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwner'
type MockOwnerClient_GetOwner_Call struct {
	*mock.Call
}

// GetOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockOwnerClient_Expecter) GetOwner(ctx interface{}, id interface{}) *MockOwnerClient_GetOwner_Call {
	return &MockOwnerClient_GetOwner_Call{Call: _e.mock.On("GetOwner", ctx, id)}
}

func (_c *MockOwnerClient_GetOwner_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockOwnerClient_GetOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockOwnerClient_GetOwner_Call) Return(_a0 *ent.Owner, _a1 error) *MockOwnerClient_GetOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOwnerClient_GetOwner_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*ent.Owner, error)) *MockOwnerClient_GetOwner_Call {
	_c.Call.Return(run)
	return _c
}

// GetOwnerFromClientID provides a mock function with given fields: ctx, clientID
func (_m *MockOwnerClient) GetOwnerFromClientID(ctx context.Context, clientID string) (*ent.Owner, error) {
	ret := _m.Called(ctx, clientID)

	var r0 *ent.Owner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.Owner, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.Owner); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Owner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOwnerClient_GetOwnerFromClientID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnerFromClientID'
type MockOwnerClient_GetOwnerFromClientID_Call struct {
	*mock.Call
}

// GetOwnerFromClientID is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID string
func (_e *MockOwnerClient_Expecter) GetOwnerFromClientID(ctx interface{}, clientID interface{}) *MockOwnerClient_GetOwnerFromClientID_Call {
	return &MockOwnerClient_GetOwnerFromClientID_Call{Call: _e.mock.On("GetOwnerFromClientID", ctx, clientID)}
}

func (_c *MockOwnerClient_GetOwnerFromClientID_Call) Run(run func(ctx context.Context, clientID string)) *MockOwnerClient_GetOwnerFromClientID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOwnerClient_GetOwnerFromClientID_Call) Return(_a0 *ent.Owner, _a1 error) *MockOwnerClient_GetOwnerFromClientID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOwnerClient_GetOwnerFromClientID_Call) RunAndReturn(run func(context.Context, string) (*ent.Owner, error)) *MockOwnerClient_GetOwnerFromClientID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockOwnerClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockOwnerClient creates a new instance of MockOwnerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockOwnerClient(t mockConstructorTestingTNewMockOwnerClient) *MockOwnerClient {
	mock := &MockOwnerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
