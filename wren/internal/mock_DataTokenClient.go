// Code generated by mockery v2.27.1. DO NOT EDIT.

package internal

import (
	context "context"

	ent "github.com/kaskada-ai/kaskada/wren/ent"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockDataTokenClient is an autogenerated mock type for the DataTokenClient type
type MockDataTokenClient struct {
	mock.Mock
}

type MockDataTokenClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataTokenClient) EXPECT() *MockDataTokenClient_Expecter {
	return &MockDataTokenClient_Expecter{mock: &_m.Mock}
}

// GetCurrentDataToken provides a mock function with given fields: ctx, owner
func (_m *MockDataTokenClient) GetCurrentDataToken(ctx context.Context, owner *ent.Owner) (*ent.DataToken, error) {
	ret := _m.Called(ctx, owner)

	var r0 *ent.DataToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner) (*ent.DataToken, error)); ok {
		return rf(ctx, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner) *ent.DataToken); ok {
		r0 = rf(ctx, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.DataToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner) error); ok {
		r1 = rf(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataTokenClient_GetCurrentDataToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentDataToken'
type MockDataTokenClient_GetCurrentDataToken_Call struct {
	*mock.Call
}

// GetCurrentDataToken is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
func (_e *MockDataTokenClient_Expecter) GetCurrentDataToken(ctx interface{}, owner interface{}) *MockDataTokenClient_GetCurrentDataToken_Call {
	return &MockDataTokenClient_GetCurrentDataToken_Call{Call: _e.mock.On("GetCurrentDataToken", ctx, owner)}
}

func (_c *MockDataTokenClient_GetCurrentDataToken_Call) Run(run func(ctx context.Context, owner *ent.Owner)) *MockDataTokenClient_GetCurrentDataToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner))
	})
	return _c
}

func (_c *MockDataTokenClient_GetCurrentDataToken_Call) Return(_a0 *ent.DataToken, _a1 error) *MockDataTokenClient_GetCurrentDataToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataTokenClient_GetCurrentDataToken_Call) RunAndReturn(run func(context.Context, *ent.Owner) (*ent.DataToken, error)) *MockDataTokenClient_GetCurrentDataToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataToken provides a mock function with given fields: ctx, owner, id
func (_m *MockDataTokenClient) GetDataToken(ctx context.Context, owner *ent.Owner, id uuid.UUID) (*ent.DataToken, error) {
	ret := _m.Called(ctx, owner, id)

	var r0 *ent.DataToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, uuid.UUID) (*ent.DataToken, error)); ok {
		return rf(ctx, owner, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, uuid.UUID) *ent.DataToken); ok {
		r0 = rf(ctx, owner, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.DataToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, uuid.UUID) error); ok {
		r1 = rf(ctx, owner, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataTokenClient_GetDataToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataToken'
type MockDataTokenClient_GetDataToken_Call struct {
	*mock.Call
}

// GetDataToken is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - id uuid.UUID
func (_e *MockDataTokenClient_Expecter) GetDataToken(ctx interface{}, owner interface{}, id interface{}) *MockDataTokenClient_GetDataToken_Call {
	return &MockDataTokenClient_GetDataToken_Call{Call: _e.mock.On("GetDataToken", ctx, owner, id)}
}

func (_c *MockDataTokenClient_GetDataToken_Call) Run(run func(ctx context.Context, owner *ent.Owner, id uuid.UUID)) *MockDataTokenClient_GetDataToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockDataTokenClient_GetDataToken_Call) Return(_a0 *ent.DataToken, _a1 error) *MockDataTokenClient_GetDataToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataTokenClient_GetDataToken_Call) RunAndReturn(run func(context.Context, *ent.Owner, uuid.UUID) (*ent.DataToken, error)) *MockDataTokenClient_GetDataToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataTokenFromVersion provides a mock function with given fields: ctx, owner, version
func (_m *MockDataTokenClient) GetDataTokenFromVersion(ctx context.Context, owner *ent.Owner, version int64) (*ent.DataToken, error) {
	ret := _m.Called(ctx, owner, version)

	var r0 *ent.DataToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, int64) (*ent.DataToken, error)); ok {
		return rf(ctx, owner, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, int64) *ent.DataToken); ok {
		r0 = rf(ctx, owner, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.DataToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, int64) error); ok {
		r1 = rf(ctx, owner, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataTokenClient_GetDataTokenFromVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataTokenFromVersion'
type MockDataTokenClient_GetDataTokenFromVersion_Call struct {
	*mock.Call
}

// GetDataTokenFromVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - version int64
func (_e *MockDataTokenClient_Expecter) GetDataTokenFromVersion(ctx interface{}, owner interface{}, version interface{}) *MockDataTokenClient_GetDataTokenFromVersion_Call {
	return &MockDataTokenClient_GetDataTokenFromVersion_Call{Call: _e.mock.On("GetDataTokenFromVersion", ctx, owner, version)}
}

func (_c *MockDataTokenClient_GetDataTokenFromVersion_Call) Run(run func(ctx context.Context, owner *ent.Owner, version int64)) *MockDataTokenClient_GetDataTokenFromVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(int64))
	})
	return _c
}

func (_c *MockDataTokenClient_GetDataTokenFromVersion_Call) Return(_a0 *ent.DataToken, _a1 error) *MockDataTokenClient_GetDataTokenFromVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataTokenClient_GetDataTokenFromVersion_Call) RunAndReturn(run func(context.Context, *ent.Owner, int64) (*ent.DataToken, error)) *MockDataTokenClient_GetDataTokenFromVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetTableVersions provides a mock function with given fields: ctx, owner, dataToken
func (_m *MockDataTokenClient) GetTableVersions(ctx context.Context, owner *ent.Owner, dataToken *ent.DataToken) (map[uuid.UUID]*ent.DataVersion, error) {
	ret := _m.Called(ctx, owner, dataToken)

	var r0 map[uuid.UUID]*ent.DataVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, *ent.DataToken) (map[uuid.UUID]*ent.DataVersion, error)); ok {
		return rf(ctx, owner, dataToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, *ent.DataToken) map[uuid.UUID]*ent.DataVersion); ok {
		r0 = rf(ctx, owner, dataToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]*ent.DataVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, *ent.DataToken) error); ok {
		r1 = rf(ctx, owner, dataToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataTokenClient_GetTableVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTableVersions'
type MockDataTokenClient_GetTableVersions_Call struct {
	*mock.Call
}

// GetTableVersions is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - dataToken *ent.DataToken
func (_e *MockDataTokenClient_Expecter) GetTableVersions(ctx interface{}, owner interface{}, dataToken interface{}) *MockDataTokenClient_GetTableVersions_Call {
	return &MockDataTokenClient_GetTableVersions_Call{Call: _e.mock.On("GetTableVersions", ctx, owner, dataToken)}
}

func (_c *MockDataTokenClient_GetTableVersions_Call) Run(run func(ctx context.Context, owner *ent.Owner, dataToken *ent.DataToken)) *MockDataTokenClient_GetTableVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(*ent.DataToken))
	})
	return _c
}

func (_c *MockDataTokenClient_GetTableVersions_Call) Return(_a0 map[uuid.UUID]*ent.DataVersion, _a1 error) *MockDataTokenClient_GetTableVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataTokenClient_GetTableVersions_Call) RunAndReturn(run func(context.Context, *ent.Owner, *ent.DataToken) (map[uuid.UUID]*ent.DataVersion, error)) *MockDataTokenClient_GetTableVersions_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDataTokenClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDataTokenClient creates a new instance of MockDataTokenClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDataTokenClient(t mockConstructorTestingTNewMockDataTokenClient) *MockDataTokenClient {
	mock := &MockDataTokenClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
