// Code generated by mockery v2.27.1. DO NOT EDIT.

package internal

import (
	context "context"

	ent "github.com/kaskada-ai/kaskada/wren/ent"
	mock "github.com/stretchr/testify/mock"

	schema "github.com/kaskada-ai/kaskada/wren/ent/schema"

	uuid "github.com/google/uuid"
)

// MockKaskadaViewClient is an autogenerated mock type for the KaskadaViewClient type
type MockKaskadaViewClient struct {
	mock.Mock
}

type MockKaskadaViewClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKaskadaViewClient) EXPECT() *MockKaskadaViewClient_Expecter {
	return &MockKaskadaViewClient_Expecter{mock: &_m.Mock}
}

// CreateKaskadaView provides a mock function with given fields: ctx, owner, newView, dependencies
func (_m *MockKaskadaViewClient) CreateKaskadaView(ctx context.Context, owner *ent.Owner, newView *ent.KaskadaView, dependencies []*ent.ViewDependency) (*ent.KaskadaView, error) {
	ret := _m.Called(ctx, owner, newView, dependencies)

	var r0 *ent.KaskadaView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, *ent.KaskadaView, []*ent.ViewDependency) (*ent.KaskadaView, error)); ok {
		return rf(ctx, owner, newView, dependencies)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, *ent.KaskadaView, []*ent.ViewDependency) *ent.KaskadaView); ok {
		r0 = rf(ctx, owner, newView, dependencies)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.KaskadaView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, *ent.KaskadaView, []*ent.ViewDependency) error); ok {
		r1 = rf(ctx, owner, newView, dependencies)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKaskadaViewClient_CreateKaskadaView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKaskadaView'
type MockKaskadaViewClient_CreateKaskadaView_Call struct {
	*mock.Call
}

// CreateKaskadaView is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - newView *ent.KaskadaView
//   - dependencies []*ent.ViewDependency
func (_e *MockKaskadaViewClient_Expecter) CreateKaskadaView(ctx interface{}, owner interface{}, newView interface{}, dependencies interface{}) *MockKaskadaViewClient_CreateKaskadaView_Call {
	return &MockKaskadaViewClient_CreateKaskadaView_Call{Call: _e.mock.On("CreateKaskadaView", ctx, owner, newView, dependencies)}
}

func (_c *MockKaskadaViewClient_CreateKaskadaView_Call) Run(run func(ctx context.Context, owner *ent.Owner, newView *ent.KaskadaView, dependencies []*ent.ViewDependency)) *MockKaskadaViewClient_CreateKaskadaView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(*ent.KaskadaView), args[3].([]*ent.ViewDependency))
	})
	return _c
}

func (_c *MockKaskadaViewClient_CreateKaskadaView_Call) Return(_a0 *ent.KaskadaView, _a1 error) *MockKaskadaViewClient_CreateKaskadaView_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKaskadaViewClient_CreateKaskadaView_Call) RunAndReturn(run func(context.Context, *ent.Owner, *ent.KaskadaView, []*ent.ViewDependency) (*ent.KaskadaView, error)) *MockKaskadaViewClient_CreateKaskadaView_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKaskadaView provides a mock function with given fields: ctx, owner, view
func (_m *MockKaskadaViewClient) DeleteKaskadaView(ctx context.Context, owner *ent.Owner, view *ent.KaskadaView) error {
	ret := _m.Called(ctx, owner, view)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, *ent.KaskadaView) error); ok {
		r0 = rf(ctx, owner, view)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKaskadaViewClient_DeleteKaskadaView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKaskadaView'
type MockKaskadaViewClient_DeleteKaskadaView_Call struct {
	*mock.Call
}

// DeleteKaskadaView is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - view *ent.KaskadaView
func (_e *MockKaskadaViewClient_Expecter) DeleteKaskadaView(ctx interface{}, owner interface{}, view interface{}) *MockKaskadaViewClient_DeleteKaskadaView_Call {
	return &MockKaskadaViewClient_DeleteKaskadaView_Call{Call: _e.mock.On("DeleteKaskadaView", ctx, owner, view)}
}

func (_c *MockKaskadaViewClient_DeleteKaskadaView_Call) Run(run func(ctx context.Context, owner *ent.Owner, view *ent.KaskadaView)) *MockKaskadaViewClient_DeleteKaskadaView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(*ent.KaskadaView))
	})
	return _c
}

func (_c *MockKaskadaViewClient_DeleteKaskadaView_Call) Return(_a0 error) *MockKaskadaViewClient_DeleteKaskadaView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKaskadaViewClient_DeleteKaskadaView_Call) RunAndReturn(run func(context.Context, *ent.Owner, *ent.KaskadaView) error) *MockKaskadaViewClient_DeleteKaskadaView_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllKaskadaViews provides a mock function with given fields: ctx, owner
func (_m *MockKaskadaViewClient) GetAllKaskadaViews(ctx context.Context, owner *ent.Owner) ([]*ent.KaskadaView, error) {
	ret := _m.Called(ctx, owner)

	var r0 []*ent.KaskadaView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner) ([]*ent.KaskadaView, error)); ok {
		return rf(ctx, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner) []*ent.KaskadaView); ok {
		r0 = rf(ctx, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.KaskadaView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner) error); ok {
		r1 = rf(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKaskadaViewClient_GetAllKaskadaViews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllKaskadaViews'
type MockKaskadaViewClient_GetAllKaskadaViews_Call struct {
	*mock.Call
}

// GetAllKaskadaViews is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
func (_e *MockKaskadaViewClient_Expecter) GetAllKaskadaViews(ctx interface{}, owner interface{}) *MockKaskadaViewClient_GetAllKaskadaViews_Call {
	return &MockKaskadaViewClient_GetAllKaskadaViews_Call{Call: _e.mock.On("GetAllKaskadaViews", ctx, owner)}
}

func (_c *MockKaskadaViewClient_GetAllKaskadaViews_Call) Run(run func(ctx context.Context, owner *ent.Owner)) *MockKaskadaViewClient_GetAllKaskadaViews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner))
	})
	return _c
}

func (_c *MockKaskadaViewClient_GetAllKaskadaViews_Call) Return(_a0 []*ent.KaskadaView, _a1 error) *MockKaskadaViewClient_GetAllKaskadaViews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKaskadaViewClient_GetAllKaskadaViews_Call) RunAndReturn(run func(context.Context, *ent.Owner) ([]*ent.KaskadaView, error)) *MockKaskadaViewClient_GetAllKaskadaViews_Call {
	_c.Call.Return(run)
	return _c
}

// GetKaskadaView provides a mock function with given fields: ctx, owner, id
func (_m *MockKaskadaViewClient) GetKaskadaView(ctx context.Context, owner *ent.Owner, id uuid.UUID) (*ent.KaskadaView, error) {
	ret := _m.Called(ctx, owner, id)

	var r0 *ent.KaskadaView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, uuid.UUID) (*ent.KaskadaView, error)); ok {
		return rf(ctx, owner, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, uuid.UUID) *ent.KaskadaView); ok {
		r0 = rf(ctx, owner, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.KaskadaView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, uuid.UUID) error); ok {
		r1 = rf(ctx, owner, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKaskadaViewClient_GetKaskadaView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKaskadaView'
type MockKaskadaViewClient_GetKaskadaView_Call struct {
	*mock.Call
}

// GetKaskadaView is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - id uuid.UUID
func (_e *MockKaskadaViewClient_Expecter) GetKaskadaView(ctx interface{}, owner interface{}, id interface{}) *MockKaskadaViewClient_GetKaskadaView_Call {
	return &MockKaskadaViewClient_GetKaskadaView_Call{Call: _e.mock.On("GetKaskadaView", ctx, owner, id)}
}

func (_c *MockKaskadaViewClient_GetKaskadaView_Call) Run(run func(ctx context.Context, owner *ent.Owner, id uuid.UUID)) *MockKaskadaViewClient_GetKaskadaView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockKaskadaViewClient_GetKaskadaView_Call) Return(_a0 *ent.KaskadaView, _a1 error) *MockKaskadaViewClient_GetKaskadaView_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKaskadaViewClient_GetKaskadaView_Call) RunAndReturn(run func(context.Context, *ent.Owner, uuid.UUID) (*ent.KaskadaView, error)) *MockKaskadaViewClient_GetKaskadaView_Call {
	_c.Call.Return(run)
	return _c
}

// GetKaskadaViewByName provides a mock function with given fields: ctx, owner, name
func (_m *MockKaskadaViewClient) GetKaskadaViewByName(ctx context.Context, owner *ent.Owner, name string) (*ent.KaskadaView, error) {
	ret := _m.Called(ctx, owner, name)

	var r0 *ent.KaskadaView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string) (*ent.KaskadaView, error)); ok {
		return rf(ctx, owner, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string) *ent.KaskadaView); ok {
		r0 = rf(ctx, owner, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.KaskadaView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, string) error); ok {
		r1 = rf(ctx, owner, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKaskadaViewClient_GetKaskadaViewByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKaskadaViewByName'
type MockKaskadaViewClient_GetKaskadaViewByName_Call struct {
	*mock.Call
}

// GetKaskadaViewByName is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - name string
func (_e *MockKaskadaViewClient_Expecter) GetKaskadaViewByName(ctx interface{}, owner interface{}, name interface{}) *MockKaskadaViewClient_GetKaskadaViewByName_Call {
	return &MockKaskadaViewClient_GetKaskadaViewByName_Call{Call: _e.mock.On("GetKaskadaViewByName", ctx, owner, name)}
}

func (_c *MockKaskadaViewClient_GetKaskadaViewByName_Call) Run(run func(ctx context.Context, owner *ent.Owner, name string)) *MockKaskadaViewClient_GetKaskadaViewByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(string))
	})
	return _c
}

func (_c *MockKaskadaViewClient_GetKaskadaViewByName_Call) Return(_a0 *ent.KaskadaView, _a1 error) *MockKaskadaViewClient_GetKaskadaViewByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKaskadaViewClient_GetKaskadaViewByName_Call) RunAndReturn(run func(context.Context, *ent.Owner, string) (*ent.KaskadaView, error)) *MockKaskadaViewClient_GetKaskadaViewByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetKaskadaViewsFromNames provides a mock function with given fields: ctx, owner, names
func (_m *MockKaskadaViewClient) GetKaskadaViewsFromNames(ctx context.Context, owner *ent.Owner, names []string) (map[string]*ent.KaskadaView, error) {
	ret := _m.Called(ctx, owner, names)

	var r0 map[string]*ent.KaskadaView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, []string) (map[string]*ent.KaskadaView, error)); ok {
		return rf(ctx, owner, names)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, []string) map[string]*ent.KaskadaView); ok {
		r0 = rf(ctx, owner, names)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*ent.KaskadaView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, []string) error); ok {
		r1 = rf(ctx, owner, names)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKaskadaViewClient_GetKaskadaViewsFromNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKaskadaViewsFromNames'
type MockKaskadaViewClient_GetKaskadaViewsFromNames_Call struct {
	*mock.Call
}

// GetKaskadaViewsFromNames is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - names []string
func (_e *MockKaskadaViewClient_Expecter) GetKaskadaViewsFromNames(ctx interface{}, owner interface{}, names interface{}) *MockKaskadaViewClient_GetKaskadaViewsFromNames_Call {
	return &MockKaskadaViewClient_GetKaskadaViewsFromNames_Call{Call: _e.mock.On("GetKaskadaViewsFromNames", ctx, owner, names)}
}

func (_c *MockKaskadaViewClient_GetKaskadaViewsFromNames_Call) Run(run func(ctx context.Context, owner *ent.Owner, names []string)) *MockKaskadaViewClient_GetKaskadaViewsFromNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].([]string))
	})
	return _c
}

func (_c *MockKaskadaViewClient_GetKaskadaViewsFromNames_Call) Return(_a0 map[string]*ent.KaskadaView, _a1 error) *MockKaskadaViewClient_GetKaskadaViewsFromNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKaskadaViewClient_GetKaskadaViewsFromNames_Call) RunAndReturn(run func(context.Context, *ent.Owner, []string) (map[string]*ent.KaskadaView, error)) *MockKaskadaViewClient_GetKaskadaViewsFromNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetKaskadaViewsWithDependency provides a mock function with given fields: ctx, owner, name, dependencyType
func (_m *MockKaskadaViewClient) GetKaskadaViewsWithDependency(ctx context.Context, owner *ent.Owner, name string, dependencyType schema.DependencyType) ([]*ent.KaskadaView, error) {
	ret := _m.Called(ctx, owner, name, dependencyType)

	var r0 []*ent.KaskadaView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string, schema.DependencyType) ([]*ent.KaskadaView, error)); ok {
		return rf(ctx, owner, name, dependencyType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string, schema.DependencyType) []*ent.KaskadaView); ok {
		r0 = rf(ctx, owner, name, dependencyType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.KaskadaView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, string, schema.DependencyType) error); ok {
		r1 = rf(ctx, owner, name, dependencyType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKaskadaViewClient_GetKaskadaViewsWithDependency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKaskadaViewsWithDependency'
type MockKaskadaViewClient_GetKaskadaViewsWithDependency_Call struct {
	*mock.Call
}

// GetKaskadaViewsWithDependency is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - name string
//   - dependencyType schema.DependencyType
func (_e *MockKaskadaViewClient_Expecter) GetKaskadaViewsWithDependency(ctx interface{}, owner interface{}, name interface{}, dependencyType interface{}) *MockKaskadaViewClient_GetKaskadaViewsWithDependency_Call {
	return &MockKaskadaViewClient_GetKaskadaViewsWithDependency_Call{Call: _e.mock.On("GetKaskadaViewsWithDependency", ctx, owner, name, dependencyType)}
}

func (_c *MockKaskadaViewClient_GetKaskadaViewsWithDependency_Call) Run(run func(ctx context.Context, owner *ent.Owner, name string, dependencyType schema.DependencyType)) *MockKaskadaViewClient_GetKaskadaViewsWithDependency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(string), args[3].(schema.DependencyType))
	})
	return _c
}

func (_c *MockKaskadaViewClient_GetKaskadaViewsWithDependency_Call) Return(_a0 []*ent.KaskadaView, _a1 error) *MockKaskadaViewClient_GetKaskadaViewsWithDependency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKaskadaViewClient_GetKaskadaViewsWithDependency_Call) RunAndReturn(run func(context.Context, *ent.Owner, string, schema.DependencyType) ([]*ent.KaskadaView, error)) *MockKaskadaViewClient_GetKaskadaViewsWithDependency_Call {
	_c.Call.Return(run)
	return _c
}

// ListKaskadaViews provides a mock function with given fields: ctx, owner, searchTerm, pageSize, offset
func (_m *MockKaskadaViewClient) ListKaskadaViews(ctx context.Context, owner *ent.Owner, searchTerm string, pageSize int, offset int) ([]*ent.KaskadaView, error) {
	ret := _m.Called(ctx, owner, searchTerm, pageSize, offset)

	var r0 []*ent.KaskadaView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string, int, int) ([]*ent.KaskadaView, error)); ok {
		return rf(ctx, owner, searchTerm, pageSize, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Owner, string, int, int) []*ent.KaskadaView); ok {
		r0 = rf(ctx, owner, searchTerm, pageSize, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.KaskadaView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Owner, string, int, int) error); ok {
		r1 = rf(ctx, owner, searchTerm, pageSize, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKaskadaViewClient_ListKaskadaViews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKaskadaViews'
type MockKaskadaViewClient_ListKaskadaViews_Call struct {
	*mock.Call
}

// ListKaskadaViews is a helper method to define mock.On call
//   - ctx context.Context
//   - owner *ent.Owner
//   - searchTerm string
//   - pageSize int
//   - offset int
func (_e *MockKaskadaViewClient_Expecter) ListKaskadaViews(ctx interface{}, owner interface{}, searchTerm interface{}, pageSize interface{}, offset interface{}) *MockKaskadaViewClient_ListKaskadaViews_Call {
	return &MockKaskadaViewClient_ListKaskadaViews_Call{Call: _e.mock.On("ListKaskadaViews", ctx, owner, searchTerm, pageSize, offset)}
}

func (_c *MockKaskadaViewClient_ListKaskadaViews_Call) Run(run func(ctx context.Context, owner *ent.Owner, searchTerm string, pageSize int, offset int)) *MockKaskadaViewClient_ListKaskadaViews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Owner), args[2].(string), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *MockKaskadaViewClient_ListKaskadaViews_Call) Return(_a0 []*ent.KaskadaView, _a1 error) *MockKaskadaViewClient_ListKaskadaViews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKaskadaViewClient_ListKaskadaViews_Call) RunAndReturn(run func(context.Context, *ent.Owner, string, int, int) ([]*ent.KaskadaView, error)) *MockKaskadaViewClient_ListKaskadaViews_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockKaskadaViewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockKaskadaViewClient creates a new instance of MockKaskadaViewClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockKaskadaViewClient(t mockConstructorTestingTNewMockKaskadaViewClient) *MockKaskadaViewClient {
	mock := &MockKaskadaViewClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
