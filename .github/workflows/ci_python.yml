# This file was initially generated by maturin v1.2.0, using:
#
#    maturin generate-ci github --pytest -o ../.github/workflows/ci_python.yml
#
# TODO:
# - `safety`
# - `typeguard`
# - `xdoctest`
name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main
  merge_group:
    branches:
      - main

defaults:
  run:
    shell: bash
    working-directory: python

permissions:
  contents: read

jobs:
  # Run lint separately from the build -- it doesn't need the built Rust code.
  #
  # Also, only do it on one machine.
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install poetry
        run: |
          pipx install poetry
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: poetry
      - name: install deps
        run: |
          poetry install --only=main --only=lint
      - name: black
        run: |
          poetry run black --diff pysrc pytests docs/source
      - name: flake8
        run: |
          poetry run flake8 pysrc pytests docs/source
      - name: isort
        run: |
          poetry run isort --filter-files --diff pysrc pytests docs/source
      - name: darglint
        run: |
          poetry run darglint pysrc
      - name: pydocstyle
        run: |
          poetry run pydocstyle pysrc

  build-wheel:
    strategy:
      fail-fast: false
      matrix:
        include:
          - host: ubuntu-latest
            target: x86_64
            test: host
            python_versions: |
              3.8
              3.9
              3.10
              3.11
          - host: ubuntu-latest
            target: x86
            test: host
          - host: ubuntu-latest
            target: aarch64
            test: run_on_arch
          - host: ubuntu-latest
            target: armv7
            test: run_on_arch
          #
          # Fail to build `ring` crate
          # - host: ubuntu-latest
          #   target: s390x
          #
          # Fail to build `ring` crate
          # - host: ubuntu-latest
          #   target: ppc64le
          #
          # Linker error
          # - host: windows-latest
          #   target: x64
          #
          #  "your Rust target architecture (32-bit) does not match your python interpreter (64-bit)"
          # - host: windows-latest
          #   target: x86
          #
          - host: macos-latest
            target: x86_64
          - host: macos-latest
            target: aarch64
            test: host
            python_versions: |
              3.8
              3.9
              3.10
              3.11
    runs-on: ${{ matrix.host }}
    steps:
      - uses: actions/checkout@v2
      - name: Install poetry
        run: |
          pipx install poetry
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_versions || '3.11' }}
          cache: poetry
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          sccache: 'true'
          manylinux: auto
          working-directory: python
          before-script-linux: |
            # We need to add the protobuf-compiler since manylinux builds happen
            # in a docker container that doesn't have it.
            yum install -y protobuf-compiler
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ${{ github.workspace }}/python/dist
      - name: pytest and mypy (host)
        if: ${{ matrix.test == 'host' }}
        run: |
          for V in $(echo "${{ matrix.python_versions }}" | xargs); do
            echo "Testing with Python $V"
            poetry env use $V
            poetry install --only=main --only=test --only=typecheck
            pip install kaskada --find-links dist --force-reinstall
            poetry run pytest
            poetry run mypy -- --install-types --non-interacitve pysrc pytests docs/source/
          done
      - name: pytest (on arch)
        uses: uraimo/run-on-arch-action@v2.5.0
        if: ${{ matrix.test == 'run_on_arch' }}
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${{ github.workspace }}/python:/python"
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip
            pip3 install -U pip poetry
          run: |
            set -e
            cd /python
            echo "Directory contents"
            ls
            # We shouldn't need regular dependencies, since they come from
            # the `pip install` of kaskada later.
            poetry install --only=main --only=test --only=typecheck
            pip3 install kaskada --find-links dist --force-reinstall
            pytest

  # Make the source distribution
  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          working-directory: python
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ${{ github.workspace }}/python/dist

  # Make the documentation site
  docs-build:
    needs: [build-wheel]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install poetry
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: poetry
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Install dependencies
        run: |
          poetry install --only=main --only=docs --only=typecheck
          pip install kaskada --find-links dist --force-reinstall
      - name: Build docs
        run: |
          sphinx-build docs/source docs/_build -j auto
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v2
        with:
            path: ${{ github.workspace }}/python/docs/_build

  docs-deploy:
    # Deployment job
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

      # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [docs-build]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   if: "startsWith(github.ref, 'refs/tags/')"
  #   needs: [linux, windows, macos, sdist]
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: wheels
  #     - name: Publish to PyPI
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #       with:
  #         command: upload
  #         args: --skip-existing *
  #         working-directory: python
