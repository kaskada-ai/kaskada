on:
  push:
    tags:
      - 'python@v[0-9]+\.[0-9]+\.[0-9]+' # Create tags matching 'python@v*'', i.e. python@v1.0.0
      - 'python@v[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+' # Create tags matching 'engine@v*'', i.e. engine@v1.0.0

  # Allow the workflow to be manually run.
  # When doing so, artifacts will be built but not associated with a release.
  workflow_dispatch:

# In cases of concurrent workflows running (consecutive pushes to PR)
# leave the latest workflow and cancel the other (older) workflows
# See https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: python-client-release
  cancel-in-progress: true


permissions:
  # For deploying release artifacts.
  contents: write
  pull-requests: read

name: Python Client Release

jobs:
  python_protos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Buf
        uses: bufbuild/buf-setup-action@v1.12.0
        with:
          version: "1.17.0"
          buf_user: ${{ secrets.BUF_USER }}
          buf_api_token: ${{ secrets.BUF_API_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Protos
        run: buf generate
        working-directory: proto

      - name: Upload Python Proto Artifact
        uses: actions/upload-artifact@v3
        with:
          name: python-protos
          # Python gRPC code is generated in src/kaskada/kaskada
          path: clients/python/src/kaskada/kaskada

  python_client_build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9"]

    needs: [python_protos]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./clients/python

    steps:

      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download Python Proto Artifact
        uses: actions/download-artifact@v3
        with:
          name: python-protos
          path: clients/python/src/kaskada/kaskada

      - name: Run image
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.3.2

      - name: Install project
        run: poetry install

      - name: Python Client Style
        run: poetry run poe style

      - name: Python Client Types
        run: poetry run poe types

      - name: Python Client Lint
        run: poetry run poe lint

      - name: Python Client Test
        run: poetry run poe test

      - name: Python Client build package
        run: poetry build
      
        # Used in publish_to_PyPi to verify the package
      - name: Generate requirements.txt 
        run: poetry export -f requirements.txt --output requirements.txt

      - name: Upload Python Client Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-client-${{ matrix.os }}-${{ matrix.python-version }}
          path: | 
            tests/integration/pythonClient/test_package.py
            clients/python/requirements.txt
            clients/python/dist

  publish_to_PyPi:
    needs: [python_client_build]
    runs-on: ubuntu-latest
    steps:

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Download Python Client Artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-client-ubuntu-latest-3.8
          # path: verify/

      - name: Verify python package build artifact
        run: |
          pip install -r clients/python/requirements.txt
          rm clients/python/requirements.txt
          pip install clients/python/dist/kaskada-*.whl
          python tests/integration/pythonClient/test_package.py
          rm tests/integration/pythonClient/test_package.py

      - name: Release to PyPi 
        if: startsWith(github.ref, 'refs/tags/python@v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          packages-dir: clients/python/dist

        # Upload artifact to GitHub release and remove draft status 
        # DO NOT MARK GITHUB RELEASE AS latest -- only one release can be latest in a GitHub repo and we reserve that for the engine release. 
      - name: Add artifacts to GitHub release
        if: startsWith(github.ref, 'refs/tags/python@v') && !contains(github.ref, 'beta')
        run: | 
          gh release upload ${TAG} clients/python/dist/kaskada-*.whl --clobber 
          gh release upload ${TAG} clients/python/dist/kaskada-*.tar.gz --clobber
          gh release edit ${TAG} --draft=false 
        shell: bash
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            TAG: ${{ github.ref_name }}

      - name: Create GitHub Beta release
        if: startsWith(github.ref, 'refs/tags/python@v') && contains(github.ref, 'beta')
        run: | 
          gh release create ${TAG} -p  -t "Python Client BETA: ${TAG}"
          gh release upload ${TAG} clients/python/dist/kaskada-*.whl --clobber 
          gh release upload ${TAG} clients/python/dist/kaskada-*.tar.gz --clobber
        shell: bash
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            TAG: ${{ github.ref_name }}
