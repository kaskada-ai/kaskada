syntax = "proto3";

package kaskada.kaskada.v1alpha;

import "google/api/field_behavior.proto";
import "kaskada/kaskada/v1alpha/common.proto";

// Describes the destination results are materialized to.
message OutputTo {
  oneof destination {
    ObjectStoreDestination object_store = 1;
    RedisDestination redis = 2;
    PulsarDestination pulsar = 3;
  }
}

message ObjectStoreDestination {
  FileType file_type = 1;

  // The uri of where to push output to.
  //
  // examples:
  // s3://my-bucket/path/to/results/
  // file:///local/path/to/results/
  string output_prefix_uri = 2;

  // Files may be returned at any point in the response stream.
  // Each file represents a different subset of the results. All files
  // should be considered part of the result set.
  // Each output file will appear once in the output paths of one of
  // the message in the response stream. All output paths appearing in
  // any message in the response should be collected and used to represent
  // the complete output.
  ResultPaths output_paths = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  message ResultPaths {
    repeated string paths = 1;
  }
}

// Writes the results directly to a RedisAI instance.
//
// Uses a series of AI.TENSORSET operations
//
// The query expression's type must be a record.
// The record type must include a field named 'key'.
// The value of the 'key' field is used as the AI.TENSORSET key.
// All other fields must be numeric.
//
// See https://redis.io/topics/protocol
message RedisDestination {
  // The hostname of the Redis instance.
  string host_name = 1;

  // The port of the Redis instance.
  int32 port = 2;

  // When `true`, TLS will be used to connect to Redis.
  bool use_tls = 3;

  // The Redis database number 0 to 15.
  int32 database_number = 4;

  // The password to connect to the Redis instance
  string password = 5;

  // An X.509 certificate to use for authenticating the server
  // to connected clients, masters or cluster peers.
  // The string should be PEM formatted.
  string tls_cert = 6;

  // An X.509 private key to use for authenticating the server
  // to connected clients, masters or cluster peers.
  // The string should be PEM formatted.
  string tls_key = 7;

  // A PEM encoded CA's certificate.
  string tls_ca_cert = 8;

  // InsecureSkipVerify controls whether a client verifies the
  // server's certificate chain and host name.
  // If this field is true, TLS accepts any certificate
  // presented by the server and any host name in that certificate.
  // In this mode, TLS is susceptible to man-in-the-middle attacks.
  // This should be used only for testing.
  bool insecure_skip_verify = 9;
}

message PulsarDestination {
  // The Pulsar protocol URL for the cluster.
  //
  // Defaults to "pulsar://127.0.0.1:6650".
  string broker_service_url = 1;

  // The topic tenant within the instance.
  //
  // Defaults to "public".
  string tenant = 2;

  // The administrative unit of topics, which acts as a grouping
  // mechanism for related topics.
  //
  // Defaults to "default".
  string namespace = 3;

  // The final part of the topic url.
  //
  // Defaults to a randomly generated uuid.
  string topic_name = 4;

  // The full topic url.
  // e.g. "persistent://{tenant}/{namespace}/{topic_name}"
  //
  // This field is populated in the output response.
  string topic_url = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
}
