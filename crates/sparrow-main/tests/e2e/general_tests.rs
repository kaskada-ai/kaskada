//! Basic e2e tests for the general operators (`is_valid`, `hash`, etc).
/// Note that `preview_rows` is "at least n", not a hard limit, hence the
/// results here.
use crate::fixtures::{
    boolean_data_fixture, f64_data_fixture, i64_data_fixture, strings_data_fixture,
    timestamp_ns_data_fixture,
};
use crate::QueryFixture;

#[tokio::test]
async fn test_is_valid_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, is_valid: is_valid(Numbers.m)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,is_valid
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5,true
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24,true
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17,true
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,,false
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,12,true
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,,false
    "###);
}

#[tokio::test]
async fn test_is_valid_f64() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, is_valid: is_valid(Numbers.m)}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,is_valid
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5.2,true
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24.3,true
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17.6,true
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,,false
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,12.4,true
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,,false
    "###);
}

#[tokio::test]
async fn test_is_valid_string() {
    insta::assert_snapshot!(QueryFixture::new("{ s: Strings.s, is_valid: is_valid(Strings.s)}").run_to_csv(&strings_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,s,is_valid
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,hEllo,true
    1996-12-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,World,true
    1996-12-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,hello world,true
    1996-12-20T00:42:57.000000000,9223372036854775808,11753611437813598533,B,,true
    1996-12-20T00:43:57.000000000,9223372036854775808,11753611437813598533,B,,true
    1996-12-20T00:44:57.000000000,9223372036854775808,11753611437813598533,B,goodbye,true
    "###);
}

#[tokio::test]
async fn test_is_valid_boolean() {
    insta::assert_snapshot!(QueryFixture::new("{ a: Booleans.a, is_valid: is_valid(Booleans.a)}").run_to_csv(&boolean_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,a,is_valid
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,true,true
    1996-12-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,false,true
    1996-12-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,,false
    1996-12-20T00:42:57.000000000,9223372036854775808,11753611437813598533,B,true,true
    1996-12-20T00:43:57.000000000,9223372036854775808,11753611437813598533,B,false,true
    1996-12-20T00:44:57.000000000,9223372036854775808,11753611437813598533,B,false,true
    1996-12-20T00:45:57.000000000,9223372036854775808,11753611437813598533,B,,false
    "###);
}

#[tokio::test]
async fn test_is_valid_timestamp_ns() {
    insta::assert_snapshot!(QueryFixture::new("{ n: Times.n, is_valid: is_valid(Times.n)}").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,n,is_valid
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,2,true
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,4,true
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,5,true
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,,false
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,8,true
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,23,true
    "###);
}

#[tokio::test]
async fn test_is_valid_record() {
    insta::assert_snapshot!(QueryFixture::new("{ is_valid: is_valid(Times)}").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,is_valid
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,true
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,true
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,true
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,true
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,true
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,true
    "###);
}

#[tokio::test]
async fn test_hash_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, hash: hash(Numbers.m)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,hash
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5,10021492687541564645
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24,9175685813237050681
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17,650022633471272026
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,,11832085162654999889
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,12,17018031324644251917
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,,11832085162654999889
    "###);
}

#[tokio::test]
async fn test_hash_string() {
    insta::assert_snapshot!(QueryFixture::new("{ s: Strings.s, hash: hash(Strings.s)}").run_to_csv(&strings_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,s,hash
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,hEllo,7780135985717684634
    1996-12-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,World,14176767044433571390
    1996-12-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,hello world,5434496457578885363
    1996-12-20T00:42:57.000000000,9223372036854775808,11753611437813598533,B,,8429509363638065888
    1996-12-20T00:43:57.000000000,9223372036854775808,11753611437813598533,B,,8429509363638065888
    1996-12-20T00:44:57.000000000,9223372036854775808,11753611437813598533,B,goodbye,4935722505451517653
    "###);
}

#[tokio::test]
async fn test_hash_boolean() {
    insta::assert_snapshot!(QueryFixture::new("{ a: Booleans.a, hash: hash(Booleans.a)}").run_to_csv(&boolean_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,a,hash
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,true,2359047937476779835
    1996-12-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,false,14253486467890685049
    1996-12-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,,11832085162654999889
    1996-12-20T00:42:57.000000000,9223372036854775808,11753611437813598533,B,true,2359047937476779835
    1996-12-20T00:43:57.000000000,9223372036854775808,11753611437813598533,B,false,14253486467890685049
    1996-12-20T00:44:57.000000000,9223372036854775808,11753611437813598533,B,false,14253486467890685049
    1996-12-20T00:45:57.000000000,9223372036854775808,11753611437813598533,B,,11832085162654999889
    "###);
}

#[tokio::test]
async fn test_hash_timestamp_ns() {
    insta::assert_snapshot!(QueryFixture::new("{ n: Times.n, hash: hash(Times.n)}").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,n,hash
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,2,1575016611515860288
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,4,11820145550582457114
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,5,10021492687541564645
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,,11832085162654999889
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,8,4864632034659211723
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,23,6336016281945450652
    "###);
}

#[tokio::test]
#[ignore = "hash on records is unsupported"]
#[allow(unused_attributes)]
async fn test_hash_record() {
    insta::assert_snapshot!(QueryFixture::new("{ hash: hash(Times)}").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @"");
}

#[tokio::test]
async fn test_basic_limit_rows_to_1() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, is_valid: is_valid(Numbers.m)}").with_preview_rows(1).run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,is_valid
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5,true
    "###);
}

#[tokio::test]
/// Set `preview_rows` to over the number of inputs. Verifies we don't stop
/// early
async fn test_basic_limit_rows_all() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, is_valid: is_valid(Numbers.m)}").with_preview_rows(100).run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,is_valid
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5,true
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24,true
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17,true
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,,false
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,12,true
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,,false
    "###);
}

#[tokio::test]
async fn test_constant_evaluation_preserves_types() {
    // Regression test for ensuring simplifier does not incorrectly
    // equate null and booleans.
    insta::assert_snapshot!(QueryFixture::new("{ m1: if(false, Numbers.m), m2: Numbers.m }").with_final_results().run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m1,m2
    1996-12-20T00:40:02.000000001,18446744073709551615,3650215962958587783,A,,
    1996-12-20T00:40:02.000000001,18446744073709551615,11753611437813598533,B,,24
    "###);
}


#[tokio::test]
async fn test_python_udf() {
    insta::assert_snapshot!(QueryFixture::new("{ m: python_udf(\"foo\", Numbers.m)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,12
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,
    "###);
}