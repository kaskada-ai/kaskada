//! Basic tests for the behavior of math operators.

use crate::fixtures::{f64_data_fixture, i64_data_fixture};
use crate::QueryFixture;

#[tokio::test]
async fn test_i64_add() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, n: Numbers.n, add: Numbers.m + Numbers.n}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,add
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,10,15
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,3,27
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,6,23
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,
    "###);
}

#[tokio::test]
async fn test_f64_add() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, n: Numbers.n, add: Numbers.m + Numbers.n}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,add
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,10.0,15.2
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,3.9,28.2
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,6.2,23.8
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9.25,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,
    "###);
}

#[tokio::test]
async fn test_i64_add_literal() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, add: Numbers.m + 1}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,add
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,6
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,25
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,18
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,13
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,
    "###);
}

#[tokio::test]
async fn test_f64_add_literal() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, add: Numbers.m + 1}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,add
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,6.2
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,25.3
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,18.6
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,13.4
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,
    "###);
}

#[tokio::test]
async fn test_i64_sub() {
    insta::assert_snapshot!(QueryFixture::new("{ sub: Numbers.m - Numbers.n}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sub
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,-5
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,21
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,11
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,
    "###);
}

#[tokio::test]
async fn test_f64_sub() {
    insta::assert_snapshot!(QueryFixture::new("{ sub: Numbers.m - Numbers.n}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sub
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,-4.8
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,20.400000000000002
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,11.400000000000002
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,
    "###);
}

#[tokio::test]
async fn test_i64_sub_literal() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, sub: Numbers.m - 1}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,sub
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,4
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,23
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,16
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,11
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,
    "###);
}

#[tokio::test]
async fn test_f64_sub_literal() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, sub: Numbers.m - 1}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,sub
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,4.2
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,23.3
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,16.6
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,11.4
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,
    "###);
}

#[tokio::test]
async fn test_i64_mul() {
    insta::assert_snapshot!(QueryFixture::new("{ mul: Numbers.m * Numbers.n}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,mul
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,50
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,72
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,102
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,
    "###);
}

#[tokio::test]
async fn test_f64_mul() {
    insta::assert_snapshot!(QueryFixture::new("{ mul: Numbers.m * Numbers.n}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,mul
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,52.0
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,94.77
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,109.12000000000002
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,
    "###);
}

#[tokio::test]
async fn test_i64_mul_literal() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, mul: Numbers.m * 2}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,mul
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,10
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,48
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,34
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,24
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,
    "###);
}

#[tokio::test]
async fn test_f64_mul_literal() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, mul: Numbers.m * 2}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,mul
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,10.4
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,48.6
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,35.2
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,24.8
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,
    "###);
}

#[tokio::test]
async fn test_i64_div() {
    insta::assert_snapshot!(QueryFixture::new("{ div: Numbers.m / Numbers.n}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,div
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,0
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,8
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,2
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,
    "###);
}

#[tokio::test]
async fn test_f64_div() {
    insta::assert_snapshot!(QueryFixture::new("{ div: Numbers.m / Numbers.n }").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,div
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,0.52
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,6.230769230769231
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,2.838709677419355
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,
    "###);
}

#[tokio::test]
async fn test_i64_div_literal() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, div: Numbers.m / 2}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,div
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,2
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,12
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,8
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,6
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,
    "###);
}

#[tokio::test]
async fn test_f64_div_literal() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, div: Numbers.m / 2}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,div
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,2.6
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,12.15
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,8.8
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,6.2
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,
    "###);
}

#[tokio::test]
async fn test_i64_neg() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, n: Numbers.n, neg_m: -Numbers.m, neg_n: neg(Numbers.n) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,neg_m,neg_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,10,-5,-10
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,3,-24,-3
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,6,-17,-6
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9,,-9
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,,-12,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_f64_neg() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, n: Numbers.n, neg_m: -Numbers.m, neg_n: neg(Numbers.n) }").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,neg_m,neg_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,10.0,-5.2,-10.0
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,3.9,-24.3,-3.9
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,6.2,-17.6,-6.2
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9.25,,-9.25
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,,-12.4,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_i64_ceil() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, n: Numbers.n, ceil_m: ceil(Numbers.m), ceil_n: ceil(Numbers.n) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,ceil_m,ceil_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,10,5,10
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,3,24,3
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,6,17,6
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9,,9
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,,12,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_f64_ceil() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, n: Numbers.n, ceil_m: ceil(Numbers.m), ceil_n: ceil(Numbers.n) }").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,ceil_m,ceil_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,10.0,6.0,10.0
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,3.9,25.0,4.0
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,6.2,18.0,7.0
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9.25,,10.0
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,,13.0,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_i64_round() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, n: Numbers.n, round_m: round(Numbers.m), round_n: round(Numbers.n) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,round_m,round_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,10,5,10
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,3,24,3
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,6,17,6
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9,,9
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,,12,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_f64_round() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, n: Numbers.n, round_m: round(Numbers.m), round_n: round(Numbers.n) }").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,round_m,round_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,10.0,5.0,10.0
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,3.9,24.0,4.0
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,6.2,18.0,6.0
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9.25,,9.0
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,,12.0,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_i64_floor() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, n: Numbers.n, floor_m: floor(Numbers.m), floor_n: floor(Numbers.n) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,floor_m,floor_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,10,5,10
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,3,24,3
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,6,17,6
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9,,9
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,,12,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_f64_floor() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, n: Numbers.n, floor_m: floor(Numbers.m), floor_n: floor(Numbers.n) }").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,floor_m,floor_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,10.0,5.0,10.0
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,3.9,24.0,3.0
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,6.2,17.0,6.0
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9.25,,9.0
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,,12.0,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_i64_zip_min() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m
                , n: Numbers.n
                , zip_min: zip_min(Numbers.m, Numbers.n)
                , zip_min_2_n: zip_min(2, Numbers.n)
                }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,zip_min,zip_min_2_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,10,5,2
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,3,3,2
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,6,6,2
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9,,2
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,,,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_f64_zip_min() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m
                , n: Numbers.n
                , zip_min: zip_min(Numbers.m, Numbers.n)
                , zip_min_2_n: zip_min(2, Numbers.n)
                }").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,zip_min,zip_min_2_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,10.0,5.2,2.0
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,3.9,3.9,2.0
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,6.2,6.2,2.0
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9.25,,2.0
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,,,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_i64_zip_max() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m
                , n: Numbers.n
                , zip_max: zip_max(Numbers.m, Numbers.n)
                , zip_max_2_n: zip_max(2, Numbers.n)
                }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,zip_max,zip_max_2_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,10,10,10
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,3,24,3
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,6,17,6
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9,,9
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,,,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_f64_zip_max() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m
                , n: Numbers.n
                , zip_max: zip_max(Numbers.m, Numbers.n)
                , zip_max_2_n: zip_max(2, Numbers.n)
                }").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,zip_max,zip_max_2_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,10.0,10.0,10.0
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,3.9,24.3,3.9
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,6.2,17.6,6.2
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9.25,,9.25
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,,,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_i64_powf() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m
                , n: Numbers.n
                ,  pow_m_n: powf(Numbers.m, Numbers.n)
                , pow_2_m: powf(2, Numbers.m)
                , pow_n_2: powf(Numbers.n, 2)
                }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,pow_m_n,pow_2_m,pow_n_2
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,10,9765625.0,32.0,100.0
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,3,13824.0,16777216.0,9.0
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,6,24137569.0,131072.0,36.0
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9,,,81.0
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,,,4096.0,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,,
    "###);
}

#[tokio::test]
async fn test_f64_powf() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m
                , n: Numbers.n
                , pow_m_n: powf(Numbers.m, Numbers.n)
                , pow_2_m: powf(2, Numbers.m)
                , pow_n_2: powf(Numbers.n, 2)
                }").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,pow_m_n,pow_2_m,pow_n_2
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,10.0,14455510.594905708,36.75834735990512,100.0
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,3.9,253433.76006548494,20655175.749880955,15.209999999999999
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,6.2,52744665.25889734,198668.0018056511,38.440000000000005
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9.25,,,85.5625
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,,,5404.7044025257765,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,,
    "###);
}

#[tokio::test]
async fn test_i64_exp() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m
                , n: Numbers.n
                , exp_m: exp(Numbers.m)
                , exp_n: exp(Numbers.n)
                }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,exp_m,exp_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,10,148.4131591025766,22026.465794806718
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,3,2.648912212984347e10,20.085536923187668
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,6,24154952.7535753,403.4287934927351
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9,,8103.083927575384
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,,162754.79141900392,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_f64_exp() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m
                , n: Numbers.n
                , exp_m: exp(Numbers.m)
                , exp_n: exp(Numbers.n)
                }").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,exp_m,exp_n
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,10.0,181.27224187515122,22026.465794806718
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,3.9,3.575657481192565e10,49.40244910553017
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,6.2,44013193.53483411,492.7490410932563
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9.25,,10404.565716560723
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,,242801.61749832364,
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,
    "###);
}

#[tokio::test]
async fn test_i64_clamp() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m
                , n: Numbers.n
                , clamp_m_2_n: clamp(Numbers.m, min = 2, max = Numbers.n)
                , clamp_m_2_10: clamp(Numbers.m, min = 2, max = 10)
                , clamp_m_n_min: clamp(Numbers.m, min = Numbers.n)
                , clamp_m_n_max: clamp(Numbers.m, max = Numbers.n)
                }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,clamp_m_2_n,clamp_m_2_10,clamp_m_n_min,clamp_m_n_max
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,10,5,5,10,5
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,3,3,10,24,3
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,6,6,10,17,6
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9,,,,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,,12,10,12,12
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,,,
    "###);
}

#[tokio::test]
async fn test_f64_clamp() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m
                , n: Numbers.n
                , clamp_m_2_n: clamp(Numbers.m, min = 2.3, max = Numbers.n)
                , clamp_m_2_10: clamp(Numbers.m, min = 2.1, max = 10.2)
                , clamp_m_n_min: clamp(Numbers.m, min = Numbers.n)
                , clamp_m_n_max: clamp(Numbers.m, max = Numbers.n)
                }").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,clamp_m_2_n,clamp_m_2_10,clamp_m_n_min,clamp_m_n_max
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,10.0,5.2,5.2,10.0,5.2
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,3.9,3.9,10.2,24.3,3.9
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,6.2,6.2,10.2,17.6,6.2
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,9.25,,,,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,,12.4,10.2,12.4,12.4
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,,,,,
    "###);
}

#[tokio::test]
async fn test_f64_sqrt() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, sqrt: sqrt(Numbers.m) }").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,sqrt
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5.2,2.280350850198276
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24.3,4.929503017546495
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17.6,4.1952353926806065
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12.4,3.521363372331802
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,
    "###);
}

#[tokio::test]
async fn test_i64_sqrt() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, sqrt: sqrt(Numbers.m) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,sqrt
    1996-12-20T00:39:57.000000000,0,12960666915911099378,A,5,2.23606797749979
    1996-12-20T00:39:58.000000000,0,2867199309159137213,B,24,4.898979485566356
    1996-12-20T00:39:59.000000000,0,12960666915911099378,A,17,4.123105625617661
    1996-12-20T00:40:00.000000000,0,12960666915911099378,A,,
    1996-12-20T00:40:01.000000000,0,12960666915911099378,A,12,3.4641016151377544
    1996-12-20T00:40:02.000000000,0,12960666915911099378,A,,
    "###);
}
