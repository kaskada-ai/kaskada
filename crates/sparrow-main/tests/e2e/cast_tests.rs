//! e2e tests for the cast operator and the implicit cast behavior.

use indoc::indoc;
use sparrow_api::kaskada::v1alpha::TableConfig;
use uuid::Uuid;

use crate::fixtures::i64_data_fixture;
use crate::{DataFixture, QueryFixture};

/// Fixture for testing cast operations.
async fn cast_data_fixture() -> DataFixture {
    let transactions = indoc! {"
        from,to,time,subsort,i64,f64,description,order_time,number_string
        0,2,1996-12-19T16:39:57-08:00,0,50,21.4,food,2005-12-19T16:39:57-08:00,65
        0,0,1997-12-19T16:39:57-08:00,1,,1.22,gas,2001-12-19T16:39:57-08:00,hello
        0,0,1997-12-19T16:39:58-08:00,2,25,0.0,food,2001-12-19T16:39:57-08:00,73
        0,0,1997-12-19T16:39:59-08:00,2,35,0.0,food,2001-12-19T16:39:57-08:00,73
        0,1,1998-12-19T16:39:57-08:00,3,25,2.2,gas,2003-12-19T16:39:57-08:00,82
        0,1,1999-12-19T16:39:58-08:00,4,12,,MOVIe,2004-12-01,18
        0,1,1999-12-19T16:39:58-08:00,5,,,null_amount,not a timestamp,
    "};
    DataFixture::new()
        .with_table_from_csv(
            TableConfig::new_with_table_source(
                "Input",
                &Uuid::new_v4(),
                "time",
                Some("subsort"),
                "from",
                "account",
            ),
            transactions,
        )
        .await
        .unwrap()
}

#[tokio::test]
async fn test_implicit_cast_i64_to_f64_add() {
    insta::assert_snapshot!(QueryFixture::new("{ i64_field: Input.i64, f64_field: Input.f64, add: Input.i64 + Input.f64 }").run_to_csv(&cast_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,i64_field,f64_field,add
    1996-12-20T00:39:57.000000000,9223372036854775808,11832085162654999889,0,50,21.4,71.4
    1997-12-20T00:39:57.000000000,9223372036854775809,11832085162654999889,0,,1.22,
    1997-12-20T00:39:58.000000000,9223372036854775810,11832085162654999889,0,25,0.0,25.0
    1997-12-20T00:39:59.000000000,9223372036854775810,11832085162654999889,0,35,0.0,35.0
    1998-12-20T00:39:57.000000000,9223372036854775811,11832085162654999889,0,25,2.2,27.2
    1999-12-20T00:39:58.000000000,9223372036854775812,11832085162654999889,0,12,,
    1999-12-20T00:39:58.000000000,9223372036854775813,11832085162654999889,0,,,
    "###);
}

#[tokio::test]
async fn test_implicit_cast_i64_to_f64_powf() {
    insta::assert_snapshot!(QueryFixture::new("{ i64_field: Input.i64, f64_field: Input.f64, powf: powf(Input.i64, Input.f64) }").run_to_csv(&cast_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,i64_field,f64_field,powf
    1996-12-20T00:39:57.000000000,9223372036854775808,11832085162654999889,0,50,21.4,2.280122041201667e36
    1997-12-20T00:39:57.000000000,9223372036854775809,11832085162654999889,0,,1.22,
    1997-12-20T00:39:58.000000000,9223372036854775810,11832085162654999889,0,25,0.0,1.0
    1997-12-20T00:39:59.000000000,9223372036854775810,11832085162654999889,0,35,0.0,1.0
    1998-12-20T00:39:57.000000000,9223372036854775811,11832085162654999889,0,25,2.2,1189.7837116974247
    1999-12-20T00:39:58.000000000,9223372036854775812,11832085162654999889,0,12,,
    1999-12-20T00:39:58.000000000,9223372036854775813,11832085162654999889,0,,,
    "###);
}

#[tokio::test]
async fn test_implicit_cast_i64_to_f64_literal() {
    insta::assert_snapshot!(QueryFixture::new("{ i64_field: Input.i64, add: Input.i64 + 1.11 }").run_to_csv(&cast_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,i64_field,add
    1996-12-20T00:39:57.000000000,9223372036854775808,11832085162654999889,0,50,51.11
    1997-12-20T00:39:57.000000000,9223372036854775809,11832085162654999889,0,,
    1997-12-20T00:39:58.000000000,9223372036854775810,11832085162654999889,0,25,26.11
    1997-12-20T00:39:59.000000000,9223372036854775810,11832085162654999889,0,35,36.11
    1998-12-20T00:39:57.000000000,9223372036854775811,11832085162654999889,0,25,26.11
    1999-12-20T00:39:58.000000000,9223372036854775812,11832085162654999889,0,12,13.11
    1999-12-20T00:39:58.000000000,9223372036854775813,11832085162654999889,0,,
    "###);
}

#[tokio::test]
async fn test_string_as_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ number_string: Input.number_string, number_string_as_i64: Input.number_string as i64 }").run_to_csv(&cast_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,number_string,number_string_as_i64
    1996-12-20T00:39:57.000000000,9223372036854775808,11832085162654999889,0,65,65
    1997-12-20T00:39:57.000000000,9223372036854775809,11832085162654999889,0,hello,
    1997-12-20T00:39:58.000000000,9223372036854775810,11832085162654999889,0,73,73
    1997-12-20T00:39:59.000000000,9223372036854775810,11832085162654999889,0,73,73
    1998-12-20T00:39:57.000000000,9223372036854775811,11832085162654999889,0,82,82
    1999-12-20T00:39:58.000000000,9223372036854775812,11832085162654999889,0,18,18
    1999-12-20T00:39:58.000000000,9223372036854775813,11832085162654999889,0,,
    "###);
}

#[tokio::test]
async fn test_i64_as_i32() {
    insta::assert_snapshot!(QueryFixture::new("{ i64: Input.i64, i64_as_i32: Input.i64 as i32 }").run_to_csv(&cast_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,i64,i64_as_i32
    1996-12-20T00:39:57.000000000,9223372036854775808,11832085162654999889,0,50,50
    1997-12-20T00:39:57.000000000,9223372036854775809,11832085162654999889,0,,
    1997-12-20T00:39:58.000000000,9223372036854775810,11832085162654999889,0,25,25
    1997-12-20T00:39:59.000000000,9223372036854775810,11832085162654999889,0,35,35
    1998-12-20T00:39:57.000000000,9223372036854775811,11832085162654999889,0,25,25
    1999-12-20T00:39:58.000000000,9223372036854775812,11832085162654999889,0,12,12
    1999-12-20T00:39:58.000000000,9223372036854775813,11832085162654999889,0,,
    "###);
}

#[tokio::test]
async fn test_f64_as_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ f64: Input.f64, f64_as_i64: Input.f64 as i64 }").run_to_csv(&cast_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,f64,f64_as_i64
    1996-12-20T00:39:57.000000000,9223372036854775808,11832085162654999889,0,21.4,21
    1997-12-20T00:39:57.000000000,9223372036854775809,11832085162654999889,0,1.22,1
    1997-12-20T00:39:58.000000000,9223372036854775810,11832085162654999889,0,0.0,0
    1997-12-20T00:39:59.000000000,9223372036854775810,11832085162654999889,0,0.0,0
    1998-12-20T00:39:57.000000000,9223372036854775811,11832085162654999889,0,2.2,2
    1999-12-20T00:39:58.000000000,9223372036854775812,11832085162654999889,0,,
    1999-12-20T00:39:58.000000000,9223372036854775813,11832085162654999889,0,,
    "###);
}

#[tokio::test]
async fn test_i64_as_string() {
    insta::assert_snapshot!(QueryFixture::new("{ i64: Input.i64, i64_as_string: Input.i64 as string }").run_to_csv(&cast_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,i64,i64_as_string
    1996-12-20T00:39:57.000000000,9223372036854775808,11832085162654999889,0,50,50
    1997-12-20T00:39:57.000000000,9223372036854775809,11832085162654999889,0,,
    1997-12-20T00:39:58.000000000,9223372036854775810,11832085162654999889,0,25,25
    1997-12-20T00:39:59.000000000,9223372036854775810,11832085162654999889,0,35,35
    1998-12-20T00:39:57.000000000,9223372036854775811,11832085162654999889,0,25,25
    1999-12-20T00:39:58.000000000,9223372036854775812,11832085162654999889,0,12,12
    1999-12-20T00:39:58.000000000,9223372036854775813,11832085162654999889,0,,
    "###);
}

#[tokio::test]
async fn test_null_literal_as_string() {
    // Include i64 because we currently don't support queries where all values
    // are literals.
    insta::assert_snapshot!(QueryFixture::new("{ i64: Input.i64, null_: null, null_as_string: null as string }").run_to_csv(&cast_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,i64,null_,null_as_string
    1996-12-20T00:39:57.000000000,9223372036854775808,11832085162654999889,0,50,,
    1997-12-20T00:39:57.000000000,9223372036854775809,11832085162654999889,0,,,
    1997-12-20T00:39:58.000000000,9223372036854775810,11832085162654999889,0,25,,
    1997-12-20T00:39:59.000000000,9223372036854775810,11832085162654999889,0,35,,
    1998-12-20T00:39:57.000000000,9223372036854775811,11832085162654999889,0,25,,
    1999-12-20T00:39:58.000000000,9223372036854775812,11832085162654999889,0,12,,
    1999-12-20T00:39:58.000000000,9223372036854775813,11832085162654999889,0,,,
    "###);
}

#[tokio::test]
async fn test_seconds_between_as_i64() {
    insta::assert_snapshot!(QueryFixture::new(
        "let duration_s = seconds_between(Input.order_time, Input.time)
         in { duration_s_as_i64: duration_s as i64 }").run_to_csv(&cast_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,duration_s_as_i64
    1996-12-20T00:39:57.000000000,9223372036854775808,11832085162654999889,0,-283996800
    1997-12-20T00:39:57.000000000,9223372036854775809,11832085162654999889,0,-126230400
    1997-12-20T00:39:58.000000000,9223372036854775810,11832085162654999889,0,-126230399
    1997-12-20T00:39:59.000000000,9223372036854775810,11832085162654999889,0,-126230398
    1998-12-20T00:39:57.000000000,9223372036854775811,11832085162654999889,0,-157766400
    1999-12-20T00:39:58.000000000,9223372036854775812,11832085162654999889,0,-156208802
    1999-12-20T00:39:58.000000000,9223372036854775813,11832085162654999889,0,
    "###);
}

#[tokio::test]
async fn test_days_between_as_i32() {
    insta::assert_snapshot!(QueryFixture::new("{ i64: Input.i64, interval_days_as_i64: days(Input.i64) as i32 }").run_to_csv(&cast_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,i64,interval_days_as_i64
    1996-12-20T00:39:57.000000000,9223372036854775808,11832085162654999889,0,50,50
    1997-12-20T00:39:57.000000000,9223372036854775809,11832085162654999889,0,,
    1997-12-20T00:39:58.000000000,9223372036854775810,11832085162654999889,0,25,25
    1997-12-20T00:39:59.000000000,9223372036854775810,11832085162654999889,0,35,35
    1998-12-20T00:39:57.000000000,9223372036854775811,11832085162654999889,0,25,25
    1999-12-20T00:39:58.000000000,9223372036854775812,11832085162654999889,0,12,12
    1999-12-20T00:39:58.000000000,9223372036854775813,11832085162654999889,0,,
    "###);
}

#[tokio::test]
async fn test_months_between_as_i32() {
    insta::assert_snapshot!(QueryFixture::new("{ i64: Input.i64, interval_months_as_i64: months(Input.i64) as i32 }").run_to_csv(&cast_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,i64,interval_months_as_i64
    1996-12-20T00:39:57.000000000,9223372036854775808,11832085162654999889,0,50,50
    1997-12-20T00:39:57.000000000,9223372036854775809,11832085162654999889,0,,
    1997-12-20T00:39:58.000000000,9223372036854775810,11832085162654999889,0,25,25
    1997-12-20T00:39:59.000000000,9223372036854775810,11832085162654999889,0,35,35
    1998-12-20T00:39:57.000000000,9223372036854775811,11832085162654999889,0,25,25
    1999-12-20T00:39:58.000000000,9223372036854775812,11832085162654999889,0,12,12
    1999-12-20T00:39:58.000000000,9223372036854775813,11832085162654999889,0,,
    "###);
}

#[tokio::test]
async fn test_bool_as_i64() {
    insta::assert_snapshot!(QueryFixture::new("let m = Numbers.m
                let n = Numbers.n + 11
                in { m, n, eq: (m == n) as i64 }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,n,eq
    1996-12-20T00:39:57.000000000,9223372036854775808,12960666915911099378,A,5,21,0
    1996-12-20T00:39:58.000000000,9223372036854775808,2867199309159137213,B,24,14,0
    1996-12-20T00:39:59.000000000,9223372036854775808,12960666915911099378,A,17,17,1
    1996-12-20T00:40:00.000000000,9223372036854775808,12960666915911099378,A,,20,
    1996-12-20T00:40:01.000000000,9223372036854775808,12960666915911099378,A,12,,
    1996-12-20T00:40:02.000000000,9223372036854775808,12960666915911099378,A,,,
    "###);
}
