//! Basic e2e tests for the aggregation operators.
// any: i64, f64, string, record, boolean, timestamp
// ordered: i64, f64, timestamp
// number: i64, f64

use crate::fixtures::{
    boolean_data_fixture, f64_data_fixture, i64_data_fixture, strings_data_fixture,
    timestamp_ns_data_fixture,
};
use crate::QueryFixture;

#[tokio::test]
async fn test_sum_i64_final() {
    insta::assert_snapshot!(QueryFixture::new("{ sum_field: sum(Numbers.m) }").with_final_results().run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum_field
    1996-12-20T00:40:02.000000001,18446744073709551615,3650215962958587783,A,34
    1996-12-20T00:40:02.000000001,18446744073709551615,11753611437813598533,B,24
    "###);
}

#[tokio::test]
async fn test_sum_since_tick_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ sum_field: sum(Numbers.m, window=since(daily())) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum_field
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,22
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,22
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,34
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,34
    "###);
}

#[tokio::test]
async fn test_since_tick_with_pipe_sum() {
    insta::assert_snapshot!(QueryFixture::new("{ sum_field: sum(Numbers.m, window=since( (Numbers.m | (daily() or $input > 10)) ) ) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum_field
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,22
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,12
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,
    "###);
}
#[tokio::test]
async fn test_since_predicate_sum_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ sum_field: sum(Numbers.m, window=since(Numbers.n > 7)) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum_field
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,17
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,12
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,12
    "###);
}
#[tokio::test]
async fn test_sliding_tick_sum_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ sum_field: sum(Numbers.m, window=sliding(2, daily())) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum_field
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,22
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,22
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,34
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,34
    "###);
}
#[tokio::test]
async fn test_sliding_predicate_sum_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ sum_field: sum(Numbers.m, window=sliding(2, Numbers.m > 1)) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum_field
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,22
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,17
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,29
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,12
    "###);
}

#[tokio::test]
async fn test_nested_sum_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ sum: sum(sum(Numbers.m))}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,27
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,49
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,83
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,117
    "###);
}

#[tokio::test]
async fn test_sum_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ sum: sum(Numbers.m)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,22
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,22
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,34
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,34
    "###);
}

#[tokio::test]
async fn test_sum_f64() {
    insta::assert_snapshot!(QueryFixture::new("{ sum: sum(Numbers.m)}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5.2
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24.3
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,22.8
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,22.8
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,35.2
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,35.2
    "###);
}

#[tokio::test]
async fn test_mean_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ mean: mean(Numbers.m)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,mean
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5.0
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24.0
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,11.0
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,11.0
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,11.333333333333334
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,11.333333333333334
    "###);
}

#[tokio::test]
async fn test_mean_f64() {
    insta::assert_snapshot!(QueryFixture::new("{ mean: mean(Numbers.m)}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,mean
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5.2
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24.3
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,11.400000000000002
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,11.400000000000002
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,11.733333333333334
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,11.733333333333334
    "###);
}

#[tokio::test]
async fn test_variance_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ variance: variance(Numbers.m)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,variance
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,36.0
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,36.0
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,24.222222222222225
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,24.222222222222225
    "###);
}

#[tokio::test]
async fn test_variance_f64() {
    insta::assert_snapshot!(QueryFixture::new("{ variance: variance(Numbers.m)}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,variance
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,38.440000000000005
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,38.440000000000005
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,25.848888888888894
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,25.848888888888894
    "###);
}

#[tokio::test]
async fn test_stddev_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, stddev: stddev(Numbers.m)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,stddev
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5,
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24,
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17,6.0
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,,6.0
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,12,4.921607686744467
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,,4.921607686744467
    "###);
}

#[tokio::test]
async fn test_stddev_f64() {
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m, stddev: stddev(Numbers.m)}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m,stddev
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5.2,
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24.3,
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17.6,6.2
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,,6.2
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,12.4,5.0841802573166985
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,,5.0841802573166985
    "###);
}

#[tokio::test]
async fn test_min_f64() {
    insta::assert_snapshot!(QueryFixture::new("{ min: min(Numbers.m)}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,min
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5.2
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24.3
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,5.2
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,5.2
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,5.2
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,5.2
    "###);
}

#[tokio::test]
async fn test_min_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ min: min(Numbers.m)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,min
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,5
    "###);
}

#[tokio::test]
async fn test_min_timestamp_ns() {
    insta::assert_snapshot!(QueryFixture::new("{ min: min(Times.n)}").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,min
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,2
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,4
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,4
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,4
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,4
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,4
    "###);
}

#[tokio::test]
async fn test_max_f64() {
    insta::assert_snapshot!(QueryFixture::new("{ max: max(Numbers.m)}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,max
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5.2
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24.3
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17.6
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,17.6
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,17.6
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,17.6
    "###);
}

#[tokio::test]
async fn test_max_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ max: max(Numbers.m)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,max
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,17
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,17
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,17
    "###);
}

#[tokio::test]
async fn test_max_timestamp_ns() {
    insta::assert_snapshot!(QueryFixture::new("{ max: max(Times.n)}").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,max
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,2
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,4
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,5
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,5
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,8
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,23
    "###);
}

#[tokio::test]
async fn test_count_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ count: count(Numbers.m)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,count
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,1
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,2
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,2
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,3
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,3
    "###);
}

#[tokio::test]
async fn test_count_f64() {
    insta::assert_snapshot!(QueryFixture::new("{ count: count(Numbers.m)}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,count
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,1
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,2
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,2
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,3
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,3
    "###);
}

#[tokio::test]
async fn test_count_record() {
    insta::assert_snapshot!(QueryFixture::new("{ count: count(Numbers)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,count
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,1
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,2
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,3
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,4
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,5
    "###);
}

#[tokio::test]
async fn test_count_string() {
    insta::assert_snapshot!(QueryFixture::new("{ count: count(Strings.s)}").run_to_csv(&strings_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,count
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1
    1996-12-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1
    1996-12-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,2
    1996-12-20T00:42:57.000000000,9223372036854775808,11753611437813598533,B,3
    1996-12-20T00:43:57.000000000,9223372036854775808,11753611437813598533,B,4
    1996-12-20T00:44:57.000000000,9223372036854775808,11753611437813598533,B,5
    "###);
}

#[tokio::test]
async fn test_count_boolean() {
    insta::assert_snapshot!(QueryFixture::new("{ count: count(Booleans.a)}").run_to_csv(&boolean_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,count
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1
    1996-12-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1
    1996-12-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1
    1996-12-20T00:42:57.000000000,9223372036854775808,11753611437813598533,B,2
    1996-12-20T00:43:57.000000000,9223372036854775808,11753611437813598533,B,3
    1996-12-20T00:44:57.000000000,9223372036854775808,11753611437813598533,B,4
    1996-12-20T00:45:57.000000000,9223372036854775808,11753611437813598533,B,4
    "###);
}

#[tokio::test]
async fn test_count_timestamp_ns() {
    insta::assert_snapshot!(QueryFixture::new("{ count: count(Times.n)}").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,count
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,2
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,2
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,3
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,4
    "###);
}

#[tokio::test]
async fn test_count_if_condition() {
    insta::assert_snapshot!(QueryFixture::new("{ count_if: count_if(Numbers.m > 10)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,count_if
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,0
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,1
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,1
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,1
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,2
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,2
    "###);
}

#[tokio::test]
async fn test_first_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ first: first(Numbers.m)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,first
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,5
    "###);
}

#[tokio::test]
async fn test_first_f64() {
    insta::assert_snapshot!(QueryFixture::new("{ first: first(Numbers.m)}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,first
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5.2
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24.3
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,5.2
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,5.2
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,5.2
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,5.2
    "###);
}

#[tokio::test]
async fn test_first_record() {
    insta::assert_snapshot!(QueryFixture::new("{ first: Numbers | first() | $input.m }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,first
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,5
    "###);
}

#[tokio::test]
async fn test_first_string() {
    insta::assert_snapshot!(QueryFixture::new("{ first: first(Strings.s)}").run_to_csv(&strings_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,first
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,hEllo
    1996-12-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,World
    1996-12-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,World
    1996-12-20T00:42:57.000000000,9223372036854775808,11753611437813598533,B,World
    1996-12-20T00:43:57.000000000,9223372036854775808,11753611437813598533,B,World
    1996-12-20T00:44:57.000000000,9223372036854775808,11753611437813598533,B,World
    "###);
}

#[tokio::test]
async fn test_first_boolean() {
    insta::assert_snapshot!(QueryFixture::new("{ first: first(Booleans.a) }").run_to_csv(&boolean_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,first
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,true
    1996-12-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,false
    1996-12-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,false
    1996-12-20T00:42:57.000000000,9223372036854775808,11753611437813598533,B,false
    1996-12-20T00:43:57.000000000,9223372036854775808,11753611437813598533,B,false
    1996-12-20T00:44:57.000000000,9223372036854775808,11753611437813598533,B,false
    1996-12-20T00:45:57.000000000,9223372036854775808,11753611437813598533,B,false
    "###);
}

#[tokio::test]
async fn test_first_timestamp_ns() {
    insta::assert_snapshot!(QueryFixture::new("{ first: first(Times.n)}").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,first
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,2
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,4
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,4
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,4
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,4
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,4
    "###);
}

#[tokio::test]
async fn test_last_sliding_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ last: last(Numbers.m, window=sliding(3, monthly())) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,last
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,17
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,12
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,12
    "###);
}

#[tokio::test]
async fn test_first_since_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ first: first(Numbers.m, window=since(daily())) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,first
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,5
    "###);
}

#[tokio::test]
async fn test_last_i64() {
    insta::assert_snapshot!(QueryFixture::new("{ last: last(Numbers.m)}").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,last
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,17
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,12
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,12
    "###);
}

#[tokio::test]
async fn test_last_i64_finished() {
    // This uses `when_finished()` to read the result of `last` after all
    // `Numbers` rows have been processed, at which point it *should not*
    // be updated, because there is no new `Numbers.m`.
    insta::assert_snapshot!(QueryFixture::new("{ last: last(Numbers.m) | when(finished()) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,last
    1996-12-20T00:40:02.000000001,18446744073709551615,3650215962958587783,A,12
    1996-12-20T00:40:02.000000001,18446744073709551615,11753611437813598533,B,24
    "###);
}

#[tokio::test]
async fn test_last_i64_record_finished() {
    // This uses `when_finished()` to read the result of `last` after all
    // `Numbers` rows have been processed, at which point it *should not*
    // be updated, because there is no new `Numbers.m`.
    insta::assert_snapshot!(QueryFixture::new("{ m: Numbers.m } | last() | when(finished())").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,m
    1996-12-20T00:40:02.000000001,18446744073709551615,3650215962958587783,A,
    1996-12-20T00:40:02.000000001,18446744073709551615,11753611437813598533,B,24
    "###);
}

#[tokio::test]
async fn test_last_f64() {
    insta::assert_snapshot!(QueryFixture::new("{ last: last(Numbers.m)}").run_to_csv(&f64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,last
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5.2
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24.3
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17.6
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,17.6
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,12.4
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,12.4
    "###);
}

#[tokio::test]
async fn test_last_record() {
    insta::assert_snapshot!(QueryFixture::new("{ last: Numbers | last() | $input.m }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,last
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,17
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,12
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,
    "###);
}

#[tokio::test]
async fn test_last_string() {
    insta::assert_snapshot!(QueryFixture::new("{ last: last(Strings.s)}").run_to_csv(&strings_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,last
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,hEllo
    1996-12-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,World
    1996-12-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,hello world
    1996-12-20T00:42:57.000000000,9223372036854775808,11753611437813598533,B,
    1996-12-20T00:43:57.000000000,9223372036854775808,11753611437813598533,B,
    1996-12-20T00:44:57.000000000,9223372036854775808,11753611437813598533,B,goodbye
    "###);
}

#[tokio::test]
async fn test_last_string_finished() {
    insta::assert_snapshot!(QueryFixture::new("{ last: last(Strings.s)}").with_final_results().run_to_csv(&strings_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,last
    1996-12-20T00:44:57.000000001,18446744073709551615,3650215962958587783,A,hEllo
    1996-12-20T00:44:57.000000001,18446744073709551615,11753611437813598533,B,goodbye
    "###);
}

#[tokio::test]
async fn test_last_boolean() {
    insta::assert_snapshot!(QueryFixture::new("{ last: last(Booleans.a)}").run_to_csv(&boolean_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,last
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,true
    1996-12-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,false
    1996-12-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,false
    1996-12-20T00:42:57.000000000,9223372036854775808,11753611437813598533,B,true
    1996-12-20T00:43:57.000000000,9223372036854775808,11753611437813598533,B,false
    1996-12-20T00:44:57.000000000,9223372036854775808,11753611437813598533,B,false
    1996-12-20T00:45:57.000000000,9223372036854775808,11753611437813598533,B,false
    "###);
}

#[tokio::test]
async fn test_last_timestamp_ns() {
    insta::assert_snapshot!(QueryFixture::new("{ last: last(Times.n)}").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,last
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,2
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,4
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,5
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,5
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,8
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,23
    "###);
}

#[tokio::test]
async fn test_count_constant() {
    insta::assert_snapshot!(QueryFixture::new("{ time: Times.time, agg: count(0) }").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,agg
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1994-12-20T00:39:57.000000000,0
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1995-10-20T00:40:57.000000000,0
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1996-08-20T00:41:57.000000000,0
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,1997-12-12T00:42:57.000000000,0
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,1998-12-13T00:43:57.000000000,0
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,2004-12-06T00:44:57.000000000,0
    "###);
}

#[tokio::test]
async fn test_count_if_constant() {
    insta::assert_snapshot!(QueryFixture::new("{ time: Times.time, agg: count_if(false) }").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,agg
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1994-12-20T00:39:57.000000000,0
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1995-10-20T00:40:57.000000000,0
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1996-08-20T00:41:57.000000000,0
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,1997-12-12T00:42:57.000000000,0
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,1998-12-13T00:43:57.000000000,0
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,2004-12-06T00:44:57.000000000,0
    "###);
}

#[tokio::test]
async fn test_first_constant() {
    insta::assert_snapshot!(QueryFixture::new("{ time: Times.time, agg: first(2) }").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,agg
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1994-12-20T00:39:57.000000000,
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1995-10-20T00:40:57.000000000,
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1996-08-20T00:41:57.000000000,
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,1997-12-12T00:42:57.000000000,
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,1998-12-13T00:43:57.000000000,
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,2004-12-06T00:44:57.000000000,
    "###);
}

#[tokio::test]
async fn test_lag_constant() {
    insta::assert_snapshot!(QueryFixture::new("{ time: Times.time, agg: lag(2, 2) }").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,agg
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1994-12-20T00:39:57.000000000,
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1995-10-20T00:40:57.000000000,
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1996-08-20T00:41:57.000000000,
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,1997-12-12T00:42:57.000000000,
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,1998-12-13T00:43:57.000000000,
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,2004-12-06T00:44:57.000000000,
    "###);
}

#[tokio::test]
async fn test_last_constant() {
    insta::assert_snapshot!(QueryFixture::new("{ time: Times.time, agg: last(2) }").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,agg
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1994-12-20T00:39:57.000000000,
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1995-10-20T00:40:57.000000000,
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1996-08-20T00:41:57.000000000,
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,1997-12-12T00:42:57.000000000,
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,1998-12-13T00:43:57.000000000,
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,2004-12-06T00:44:57.000000000,
    "###);
}

#[tokio::test]
async fn test_max_constant() {
    insta::assert_snapshot!(QueryFixture::new("{ time: Times.time, agg: max(2) }").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,agg
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1994-12-20T00:39:57.000000000,
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1995-10-20T00:40:57.000000000,
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1996-08-20T00:41:57.000000000,
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,1997-12-12T00:42:57.000000000,
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,1998-12-13T00:43:57.000000000,
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,2004-12-06T00:44:57.000000000,
    "###);
}

#[tokio::test]
async fn test_mean_constant() {
    insta::assert_snapshot!(QueryFixture::new("{ time: Times.time, agg: mean(2) }").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,agg
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1994-12-20T00:39:57.000000000,
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1995-10-20T00:40:57.000000000,
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1996-08-20T00:41:57.000000000,
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,1997-12-12T00:42:57.000000000,
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,1998-12-13T00:43:57.000000000,
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,2004-12-06T00:44:57.000000000,
    "###);
}

#[tokio::test]
async fn test_min_constant() {
    insta::assert_snapshot!(QueryFixture::new("{ time: Times.time, agg: min(2) }").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,agg
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1994-12-20T00:39:57.000000000,
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1995-10-20T00:40:57.000000000,
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1996-08-20T00:41:57.000000000,
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,1997-12-12T00:42:57.000000000,
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,1998-12-13T00:43:57.000000000,
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,2004-12-06T00:44:57.000000000,
    "###);
}

#[tokio::test]
async fn test_min_stddev() {
    insta::assert_snapshot!(QueryFixture::new("{ time: Times.time, agg: stddev(2) }").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,agg
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1994-12-20T00:39:57.000000000,
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1995-10-20T00:40:57.000000000,
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1996-08-20T00:41:57.000000000,
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,1997-12-12T00:42:57.000000000,
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,1998-12-13T00:43:57.000000000,
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,2004-12-06T00:44:57.000000000,
    "###);
}

#[tokio::test]
async fn test_min_sum() {
    insta::assert_snapshot!(QueryFixture::new("{ time: Times.time, agg: sum(2) }").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,agg
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1994-12-20T00:39:57.000000000,
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1995-10-20T00:40:57.000000000,
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1996-08-20T00:41:57.000000000,
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,1997-12-12T00:42:57.000000000,
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,1998-12-13T00:43:57.000000000,
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,2004-12-06T00:44:57.000000000,
    "###);
}

#[tokio::test]
async fn test_min_variance() {
    insta::assert_snapshot!(QueryFixture::new("{ time: Times.time, agg: variance(2) }").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,agg
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1994-12-20T00:39:57.000000000,
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1995-10-20T00:40:57.000000000,
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1996-08-20T00:41:57.000000000,
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,1997-12-12T00:42:57.000000000,
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,1998-12-13T00:43:57.000000000,
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,2004-12-06T00:44:57.000000000,
    "###);
}

#[tokio::test]
async fn test_first_sum_constant() {
    insta::assert_snapshot!(QueryFixture::new("{ time: Times.time, agg: first(sum(1)) }").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,agg
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1994-12-20T00:39:57.000000000,
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1995-10-20T00:40:57.000000000,
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1996-08-20T00:41:57.000000000,
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,1997-12-12T00:42:57.000000000,
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,1998-12-13T00:43:57.000000000,
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,2004-12-06T00:44:57.000000000,
    "###);
}

#[tokio::test]
async fn test_add_sum_constants() {
    insta::assert_snapshot!(QueryFixture::new("{ time: Times.time, agg: sum(1) + sum(2) }").run_to_csv(&timestamp_ns_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,agg
    1994-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,1994-12-20T00:39:57.000000000,
    1995-10-20T00:40:57.000000000,9223372036854775808,11753611437813598533,B,1995-10-20T00:40:57.000000000,
    1996-08-20T00:41:57.000000000,9223372036854775808,11753611437813598533,B,1996-08-20T00:41:57.000000000,
    1997-12-12T00:42:57.000000000,9223372036854775808,11753611437813598533,B,1997-12-12T00:42:57.000000000,
    1998-12-13T00:43:57.000000000,9223372036854775808,11753611437813598533,B,1998-12-13T00:43:57.000000000,
    2004-12-06T00:44:57.000000000,9223372036854775808,11753611437813598533,B,2004-12-06T00:44:57.000000000,
    "###);
}

#[tokio::test]
async fn test_literal_agg() {
    insta::assert_snapshot!(QueryFixture::new("{ agg_literal: sum(5), max_output: max(Numbers.m) }").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,agg_literal,max_output
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,,5
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,,24
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,,17
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,,17
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,,17
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,,17
    "###);
}
