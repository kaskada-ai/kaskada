//! Basic e2e tests for the tick functions.

use indoc::indoc;
use sparrow_api::kaskada::v1alpha::TableConfig;
use uuid::Uuid;

use crate::fixtures::i64_data_fixture;
use crate::{DataFixture, QueryFixture};

/// A dataset with inputs spanning minutes
async fn data_fixture_over_minutes() -> DataFixture {
    DataFixture::new()
        .with_table_from_csv(
            TableConfig::new_with_table_source(
                "Foo",
                &Uuid::new_v4(),
                "time",
                Some("subsort"),
                "key",
                "",
            ),
            indoc! {"
    time,subsort,key,n,vegetable,bool
    1996-12-19T16:39:57-08:00,0,A,10,arugula,true
    1996-12-19T16:39:58-08:00,0,B,3.9,beet,true
    1996-12-19T16:39:59-08:00,0,A,6.2,carrot,false
    1996-12-19T16:40:00-08:00,0,A,9.25,dill,false
    1996-12-19T16:40:01-08:00,0,A,3,edamame,true
    1996-12-19T16:40:02-08:00,0,A,8,fennel,false
    1996-12-19T16:40:02-08:00,0,B,8,fennel,false
    1996-12-19T16:40:03-08:00,0,A,,green beans,true
    1996-12-19T16:40:04-08:00,0,A,10,habanero,false
    1996-12-19T16:41:04-08:00,0,A,10,habanero,false
    "},
        )
        .await
        .unwrap()
}

/// A dataset with inputs spanning hours
async fn data_fixture_over_hours() -> DataFixture {
    DataFixture::new()
        .with_table_from_csv(
            TableConfig::new_with_table_source(
                "Foo",
                &Uuid::new_v4(),
                "time",
                Some("subsort"),
                "key",
                "",
            ),
            indoc! {"
    time,subsort,key,n,vegetable,bool
    1996-12-19T23:39:57-08:00,0,A,10,arugula,true
    1996-12-19T23:39:58-08:00,0,B,3.9,beet,true
    1996-12-20T00:00:00-08:00,0,A,6.2,carrot,false
    1996-12-20T00:44:00-08:00,0,A,9.25,dill,false
    1996-12-20T00:45:01-08:00,0,A,3,edamame,true
    1996-12-20T01:20:02-08:00,0,A,8,fennel,false
    1996-12-20T01:25:02-08:00,0,B,23.9,cabbage,false
    1996-12-20T02:30:03-08:00,0,A,,green beans,true
    1996-12-20T03:40:04-08:00,0,A,10,habanero,false
    "},
        )
        .await
        .unwrap()
}

/// A dataset with inputs spanning hours, with the end lined up to an hour.
async fn data_fixture_over_hours_end_on_hour() -> DataFixture {
    DataFixture::new()
        .with_table_from_csv(
            TableConfig::new_with_table_source(
                "Foo",
                &Uuid::new_v4(),
                "time",
                Some("subsort"),
                "key",
                "",
            ),
            indoc! {"
    time,subsort,key,n,vegetable,bool
    1996-12-19T23:39:57-08:00,0,A,10,arugula,true
    1996-12-19T23:39:58-08:00,0,B,3.9,beet,true
    1996-12-20T00:00:00-08:00,0,A,6.2,carrot,false
    1996-12-20T00:44:00-08:00,0,A,9.25,dill,false
    1996-12-20T00:45:01-08:00,0,A,3,edamame,true
    1996-12-20T01:20:02-08:00,0,A,8,fennel,false
    1996-12-20T01:25:02-08:00,0,B,23.9,cabbage,false
    1996-12-20T02:30:03-08:00,0,A,,green beans,true
    1996-12-20T03:00:00-08:00,0,A,10,habanero,false
    "},
        )
        .await
        .unwrap()
}

/// A dataset with inputs spanning days
async fn data_days_for_else() -> DataFixture {
    DataFixture::new()
        .with_table_from_csv(
            TableConfig::new_with_table_source(
                "Foo",
                &Uuid::new_v4(),
                "time",
                Some("subsort"),
                "key",
                "",
            ),
            indoc! {"
    time,subsort,key,n,vegetable,bool
    1996-12-19T12:39:57-08:00,0,A,10,arugula,true
    1996-12-19T12:39:58-08:00,0,B,,beet,true
    1996-12-20T16:32:59-08:00,0,A,6.2,carrot,false
    1996-12-20T16:44:00-08:00,0,A,9.25,dill,false
    1996-12-20T16:45:01-08:00,0,A,3,edamame,true
    1996-12-21T00:00:00-08:00,0,A,8,fennel,false
    1996-12-21T16:30:03-08:00,0,A,,green beans,true
    1996-12-22T16:40:04-08:00,0,A,10,habanero,false
    "},
        )
        .await
        .unwrap()
}

/// A dataset with inputs spanning days
async fn data_fixture_over_days() -> DataFixture {
    DataFixture::new()
        .with_table_from_csv(
            TableConfig::new_with_table_source(
                "Foo",
                &Uuid::new_v4(),
                "time",
                Some("subsort"),
                "key",
                "",
            ),
            indoc! {"
    time,subsort,key,n,vegetable,bool
    1996-12-19T12:39:57-08:00,0,A,10,arugula,true
    1996-12-19T12:39:58-08:00,0,B,3.9,beet,true
    1996-12-20T16:32:59-08:00,0,A,6.2,carrot,false
    1996-12-20T16:44:00-08:00,0,A,9.25,dill,false
    1996-12-20T16:45:01-08:00,0,A,3,edamame,true
    1996-12-21T00:00:00-08:00,0,A,8,fennel,false
    1996-12-21T16:25:02-08:00,0,B,23.9,cabbage,false
    1996-12-21T16:30:03-08:00,0,A,,green beans,true
    1996-12-22T16:40:04-08:00,0,A,10,habanero,false
    "},
        )
        .await
        .unwrap()
}

/// A dataset with inputs spanning months
async fn data_fixture_over_months() -> DataFixture {
    DataFixture::new()
        .with_table_from_csv(
            TableConfig::new_with_table_source(
                "Foo",
                &Uuid::new_v4(),
                "time",
                Some("subsort"),
                "key",
                "",
            ),
            indoc! {"
    time,subsort,key,n,vegetable,bool
    1996-12-19T12:39:57-08:00,0,A,10,arugula,true
    1996-12-19T12:39:58-08:00,0,B,3.9,beet,true
    1997-01-20T16:32:59-08:00,0,A,6.2,carrot,false
    1997-01-20T16:44:00-08:00,0,A,9.25,dill,false
    1997-02-20T16:45:01-08:00,0,A,3,edamame,true
    1997-04-21T16:20:02-08:00,0,A,8,fennel,false
    1997-04-21T16:25:02-08:00,0,B,23.9,cabbage,false
    1997-04-21T16:30:03-08:00,0,A,,green beans,true
    1997-05-22T16:40:04-08:00,0,A,10,habanero,false
    "},
        )
        .await
        .unwrap()
}

/// A dataset with inputs spanning years
async fn data_fixture_over_years() -> DataFixture {
    DataFixture::new()
        .with_table_from_csv(
            TableConfig::new_with_table_source(
                "Foo",
                &Uuid::new_v4(),
                "time",
                Some("subsort"),
                "key",
                "",
            ),
            indoc! {"
    time,subsort,key,n,vegetable,bool
    1996-12-19T12:39:57-08:00,0,A,10,arugula,true
    1996-12-19T12:39:58-08:00,0,B,3.9,beet,true
    1998-01-20T16:32:59-08:00,0,A,6.2,carrot,false
    1998-01-20T16:44:00-08:00,0,A,9.25,dill,false
    1999-02-20T16:45:01-08:00,0,A,3,edamame,true
    1999-04-21T16:20:02-08:00,0,A,8,fennel,false
    2001-04-21T16:25:02-08:00,0,B,23.9,cabbage,false
    2001-04-21T16:30:03-08:00,0,A,,green beans,true
    2001-05-22T16:40:04-08:00,0,A,10,habanero,false
    "},
        )
        .await
        .unwrap()
}

#[tokio::test]
async fn test_time_of_produces_discrete_values() {
    insta::assert_snapshot!(QueryFixture::new("{ t: Foo.n | last() | time_of() } | when(hourly())").run_to_csv(&data_fixture_over_hours_end_on_hour().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,t
    1996-12-20T08:00:00.000000000,18446744073709551615,3650215962958587783,A,
    1996-12-20T08:00:00.000000000,18446744073709551615,11753611437813598533,B,
    1996-12-20T09:00:00.000000000,18446744073709551615,3650215962958587783,A,
    1996-12-20T09:00:00.000000000,18446744073709551615,11753611437813598533,B,
    1996-12-20T10:00:00.000000000,18446744073709551615,3650215962958587783,A,
    1996-12-20T10:00:00.000000000,18446744073709551615,11753611437813598533,B,
    1996-12-20T11:00:00.000000000,18446744073709551615,3650215962958587783,A,
    1996-12-20T11:00:00.000000000,18446744073709551615,11753611437813598533,B,
    "###);
}

#[tokio::test]
async fn test_time_of_to_last_produces_continuous_values() {
    insta::assert_snapshot!(QueryFixture::new("{ t: Foo.n | time_of() | last() } | when(hourly())").run_to_csv(&data_fixture_over_hours_end_on_hour().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,t
    1996-12-20T08:00:00.000000000,18446744073709551615,3650215962958587783,A,1996-12-20T08:00:00.000000000
    1996-12-20T08:00:00.000000000,18446744073709551615,11753611437813598533,B,1996-12-20T07:39:58.000000000
    1996-12-20T09:00:00.000000000,18446744073709551615,3650215962958587783,A,1996-12-20T08:45:01.000000000
    1996-12-20T09:00:00.000000000,18446744073709551615,11753611437813598533,B,1996-12-20T07:39:58.000000000
    1996-12-20T10:00:00.000000000,18446744073709551615,3650215962958587783,A,1996-12-20T09:20:02.000000000
    1996-12-20T10:00:00.000000000,18446744073709551615,11753611437813598533,B,1996-12-20T09:25:02.000000000
    1996-12-20T11:00:00.000000000,18446744073709551615,3650215962958587783,A,1996-12-20T11:00:00.000000000
    1996-12-20T11:00:00.000000000,18446744073709551615,11753611437813598533,B,1996-12-20T09:25:02.000000000
    "###);
}

#[tokio::test]
async fn test_tick_with_discrete_values() {
    insta::assert_snapshot!(QueryFixture::new("Foo | when(hourly())").run_to_csv(&data_fixture_over_hours_end_on_hour().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,subsort,key,n,vegetable,bool
    1996-12-20T08:00:00.000000000,18446744073709551615,3650215962958587783,A,,,,,,
    1996-12-20T08:00:00.000000000,18446744073709551615,11753611437813598533,B,,,,,,
    1996-12-20T09:00:00.000000000,18446744073709551615,3650215962958587783,A,,,,,,
    1996-12-20T09:00:00.000000000,18446744073709551615,11753611437813598533,B,,,,,,
    1996-12-20T10:00:00.000000000,18446744073709551615,3650215962958587783,A,,,,,,
    1996-12-20T10:00:00.000000000,18446744073709551615,11753611437813598533,B,,,,,,
    1996-12-20T11:00:00.000000000,18446744073709551615,3650215962958587783,A,,,,,,
    1996-12-20T11:00:00.000000000,18446744073709551615,11753611437813598533,B,,,,,,
    "###);
}

#[tokio::test]
async fn test_since_tick_when_tick() {
    insta::assert_snapshot!(QueryFixture::new("{ when: count(Foo, window=since(hourly())) } | when(hourly())").run_to_csv(&data_fixture_over_hours_end_on_hour().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,when
    1996-12-20T08:00:00.000000000,18446744073709551615,3650215962958587783,A,2
    1996-12-20T08:00:00.000000000,18446744073709551615,11753611437813598533,B,1
    1996-12-20T09:00:00.000000000,18446744073709551615,3650215962958587783,A,2
    1996-12-20T09:00:00.000000000,18446744073709551615,11753611437813598533,B,0
    1996-12-20T10:00:00.000000000,18446744073709551615,3650215962958587783,A,1
    1996-12-20T10:00:00.000000000,18446744073709551615,11753611437813598533,B,1
    1996-12-20T11:00:00.000000000,18446744073709551615,3650215962958587783,A,2
    1996-12-20T11:00:00.000000000,18446744073709551615,11753611437813598533,B,0
    "###);
}

#[tokio::test]
async fn test_since_minutely() {
    insta::assert_snapshot!(QueryFixture::new("{ n: Foo.n, minutely: count(Foo, window=since(minutely())) }").run_to_csv(&data_fixture_over_minutes().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,n,minutely
    1996-12-20T00:39:57.000000000,9223372036854775808,3650215962958587783,A,10.0,1
    1996-12-20T00:39:58.000000000,9223372036854775808,11753611437813598533,B,3.9,1
    1996-12-20T00:39:59.000000000,9223372036854775808,3650215962958587783,A,6.2,2
    1996-12-20T00:40:00.000000000,9223372036854775808,3650215962958587783,A,9.25,3
    1996-12-20T00:40:00.000000000,18446744073709551615,3650215962958587783,A,,3
    1996-12-20T00:40:00.000000000,18446744073709551615,11753611437813598533,B,,1
    1996-12-20T00:40:01.000000000,9223372036854775808,3650215962958587783,A,3.0,1
    1996-12-20T00:40:02.000000000,9223372036854775808,3650215962958587783,A,8.0,2
    1996-12-20T00:40:02.000000000,9223372036854775808,11753611437813598533,B,8.0,1
    1996-12-20T00:40:03.000000000,9223372036854775808,3650215962958587783,A,,3
    1996-12-20T00:40:04.000000000,9223372036854775808,3650215962958587783,A,10.0,4
    1996-12-20T00:41:00.000000000,18446744073709551615,3650215962958587783,A,,4
    1996-12-20T00:41:00.000000000,18446744073709551615,11753611437813598533,B,,1
    1996-12-20T00:41:04.000000000,9223372036854775808,3650215962958587783,A,10.0,1
    "###);
}

#[tokio::test]
async fn test_if_hourly() {
    insta::assert_snapshot!(QueryFixture::new("{ n: Foo.n, n_if_hourly: Foo.n | if(hourly()) }").run_to_csv(&data_fixture_over_hours_end_on_hour().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,n,n_if_hourly
    1996-12-20T07:39:57.000000000,9223372036854775808,3650215962958587783,A,10.0,
    1996-12-20T07:39:58.000000000,9223372036854775808,11753611437813598533,B,3.9,
    1996-12-20T08:00:00.000000000,9223372036854775808,3650215962958587783,A,6.2,
    1996-12-20T08:00:00.000000000,18446744073709551615,3650215962958587783,A,,
    1996-12-20T08:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1996-12-20T08:44:00.000000000,9223372036854775808,3650215962958587783,A,9.25,
    1996-12-20T08:45:01.000000000,9223372036854775808,3650215962958587783,A,3.0,
    1996-12-20T09:00:00.000000000,18446744073709551615,3650215962958587783,A,,
    1996-12-20T09:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1996-12-20T09:20:02.000000000,9223372036854775808,3650215962958587783,A,8.0,
    1996-12-20T09:25:02.000000000,9223372036854775808,11753611437813598533,B,23.9,
    1996-12-20T10:00:00.000000000,18446744073709551615,3650215962958587783,A,,
    1996-12-20T10:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1996-12-20T10:30:03.000000000,9223372036854775808,3650215962958587783,A,,
    1996-12-20T11:00:00.000000000,9223372036854775808,3650215962958587783,A,10.0,
    1996-12-20T11:00:00.000000000,18446744073709551615,3650215962958587783,A,,
    1996-12-20T11:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    "###);
}

#[tokio::test]
async fn test_daily_else() {
    insta::assert_snapshot!(QueryFixture::new("{ sum_since: sum(Foo.n, window=since(daily())) | else(0) }").run_to_csv(&data_days_for_else().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum_since
    1996-12-19T20:39:57.000000000,9223372036854775808,3650215962958587783,A,10.0
    1996-12-19T20:39:58.000000000,9223372036854775808,11753611437813598533,B,0.0
    1996-12-20T00:00:00.000000000,18446744073709551615,3650215962958587783,A,10.0
    1996-12-20T00:00:00.000000000,18446744073709551615,11753611437813598533,B,0.0
    1996-12-21T00:00:00.000000000,18446744073709551615,3650215962958587783,A,0.0
    1996-12-21T00:00:00.000000000,18446744073709551615,11753611437813598533,B,0.0
    1996-12-21T00:32:59.000000000,9223372036854775808,3650215962958587783,A,6.2
    1996-12-21T00:44:00.000000000,9223372036854775808,3650215962958587783,A,15.45
    1996-12-21T00:45:01.000000000,9223372036854775808,3650215962958587783,A,18.45
    1996-12-21T08:00:00.000000000,9223372036854775808,3650215962958587783,A,26.45
    1996-12-22T00:00:00.000000000,18446744073709551615,3650215962958587783,A,26.45
    1996-12-22T00:00:00.000000000,18446744073709551615,11753611437813598533,B,0.0
    1996-12-22T00:30:03.000000000,9223372036854775808,3650215962958587783,A,0.0
    1996-12-23T00:00:00.000000000,18446744073709551615,3650215962958587783,A,0.0
    1996-12-23T00:00:00.000000000,18446744073709551615,11753611437813598533,B,0.0
    1996-12-23T00:40:04.000000000,9223372036854775808,3650215962958587783,A,10.0
    "###);
}

#[tokio::test]
async fn test_daily_else_to_last() {
    insta::assert_snapshot!(QueryFixture::new("{ sum_since: sum(Foo.n, window=since(daily())) | else(0) | last() }").run_to_csv(&data_days_for_else().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum_since
    1996-12-19T20:39:57.000000000,9223372036854775808,3650215962958587783,A,10.0
    1996-12-19T20:39:58.000000000,9223372036854775808,11753611437813598533,B,0.0
    1996-12-20T00:00:00.000000000,18446744073709551615,3650215962958587783,A,10.0
    1996-12-20T00:00:00.000000000,18446744073709551615,11753611437813598533,B,0.0
    1996-12-21T00:00:00.000000000,18446744073709551615,3650215962958587783,A,0.0
    1996-12-21T00:00:00.000000000,18446744073709551615,11753611437813598533,B,0.0
    1996-12-21T00:32:59.000000000,9223372036854775808,3650215962958587783,A,6.2
    1996-12-21T00:44:00.000000000,9223372036854775808,3650215962958587783,A,15.45
    1996-12-21T00:45:01.000000000,9223372036854775808,3650215962958587783,A,18.45
    1996-12-21T08:00:00.000000000,9223372036854775808,3650215962958587783,A,26.45
    1996-12-22T00:00:00.000000000,18446744073709551615,3650215962958587783,A,26.45
    1996-12-22T00:00:00.000000000,18446744073709551615,11753611437813598533,B,0.0
    1996-12-22T00:30:03.000000000,9223372036854775808,3650215962958587783,A,0.0
    1996-12-23T00:00:00.000000000,18446744073709551615,3650215962958587783,A,0.0
    1996-12-23T00:00:00.000000000,18446744073709551615,11753611437813598533,B,0.0
    1996-12-23T00:40:04.000000000,9223372036854775808,3650215962958587783,A,10.0
    "###);
}

#[tokio::test]
async fn test_since_daily() {
    insta::assert_snapshot!(QueryFixture::new("{ n: Foo.n, sum_since: sum(Foo.n, window=since(daily())) }").run_to_csv(&data_fixture_over_days().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,n,sum_since
    1996-12-19T20:39:57.000000000,9223372036854775808,3650215962958587783,A,10.0,10.0
    1996-12-19T20:39:58.000000000,9223372036854775808,11753611437813598533,B,3.9,3.9
    1996-12-20T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,10.0
    1996-12-20T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,3.9
    1996-12-21T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,
    1996-12-21T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1996-12-21T00:32:59.000000000,9223372036854775808,3650215962958587783,A,6.2,6.2
    1996-12-21T00:44:00.000000000,9223372036854775808,3650215962958587783,A,9.25,15.45
    1996-12-21T00:45:01.000000000,9223372036854775808,3650215962958587783,A,3.0,18.45
    1996-12-21T08:00:00.000000000,9223372036854775808,3650215962958587783,A,8.0,26.45
    1996-12-22T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,26.45
    1996-12-22T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1996-12-22T00:25:02.000000000,9223372036854775808,11753611437813598533,B,23.9,23.9
    1996-12-22T00:30:03.000000000,9223372036854775808,3650215962958587783,A,,
    1996-12-23T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,
    1996-12-23T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,23.9
    1996-12-23T00:40:04.000000000,9223372036854775808,3650215962958587783,A,10.0,10.0
    "###);
}

#[tokio::test]
async fn test_since_hourly() {
    insta::assert_snapshot!(QueryFixture::new("{ n: Foo.n, sum_since: sum(Foo.n, window=since(hourly())) }").run_to_csv(&data_fixture_over_hours().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,n,sum_since
    1996-12-20T07:39:57.000000000,9223372036854775808,3650215962958587783,A,10.0,10.0
    1996-12-20T07:39:58.000000000,9223372036854775808,11753611437813598533,B,3.9,3.9
    1996-12-20T08:00:00.000000000,9223372036854775808,3650215962958587783,A,6.2,16.2
    1996-12-20T08:00:00.000000000,18446744073709551615,3650215962958587783,A,,16.2
    1996-12-20T08:00:00.000000000,18446744073709551615,11753611437813598533,B,,3.9
    1996-12-20T08:44:00.000000000,9223372036854775808,3650215962958587783,A,9.25,9.25
    1996-12-20T08:45:01.000000000,9223372036854775808,3650215962958587783,A,3.0,12.25
    1996-12-20T09:00:00.000000000,18446744073709551615,3650215962958587783,A,,12.25
    1996-12-20T09:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1996-12-20T09:20:02.000000000,9223372036854775808,3650215962958587783,A,8.0,8.0
    1996-12-20T09:25:02.000000000,9223372036854775808,11753611437813598533,B,23.9,23.9
    1996-12-20T10:00:00.000000000,18446744073709551615,3650215962958587783,A,,8.0
    1996-12-20T10:00:00.000000000,18446744073709551615,11753611437813598533,B,,23.9
    1996-12-20T10:30:03.000000000,9223372036854775808,3650215962958587783,A,,
    1996-12-20T11:00:00.000000000,18446744073709551615,3650215962958587783,A,,
    1996-12-20T11:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1996-12-20T11:40:04.000000000,9223372036854775808,3650215962958587783,A,10.0,10.0
    "###);
}

#[tokio::test]
async fn test_since_hourly_end_on_hour() {
    insta::assert_snapshot!(QueryFixture::new("{ n: Foo.n, sum_since: sum(Foo.n, window=since(hourly())) }").run_to_csv(&data_fixture_over_hours_end_on_hour().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,n,sum_since
    1996-12-20T07:39:57.000000000,9223372036854775808,3650215962958587783,A,10.0,10.0
    1996-12-20T07:39:58.000000000,9223372036854775808,11753611437813598533,B,3.9,3.9
    1996-12-20T08:00:00.000000000,9223372036854775808,3650215962958587783,A,6.2,16.2
    1996-12-20T08:00:00.000000000,18446744073709551615,3650215962958587783,A,,16.2
    1996-12-20T08:00:00.000000000,18446744073709551615,11753611437813598533,B,,3.9
    1996-12-20T08:44:00.000000000,9223372036854775808,3650215962958587783,A,9.25,9.25
    1996-12-20T08:45:01.000000000,9223372036854775808,3650215962958587783,A,3.0,12.25
    1996-12-20T09:00:00.000000000,18446744073709551615,3650215962958587783,A,,12.25
    1996-12-20T09:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1996-12-20T09:20:02.000000000,9223372036854775808,3650215962958587783,A,8.0,8.0
    1996-12-20T09:25:02.000000000,9223372036854775808,11753611437813598533,B,23.9,23.9
    1996-12-20T10:00:00.000000000,18446744073709551615,3650215962958587783,A,,8.0
    1996-12-20T10:00:00.000000000,18446744073709551615,11753611437813598533,B,,23.9
    1996-12-20T10:30:03.000000000,9223372036854775808,3650215962958587783,A,,
    1996-12-20T11:00:00.000000000,9223372036854775808,3650215962958587783,A,10.0,10.0
    1996-12-20T11:00:00.000000000,18446744073709551615,3650215962958587783,A,,10.0
    1996-12-20T11:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    "###);
}

#[tokio::test]
async fn test_when_hourly_end_on_hour() {
    insta::assert_snapshot!(QueryFixture::new("{ sum_when_tick: sum(Foo.n) | when(hourly()) }").run_to_csv(&data_fixture_over_hours_end_on_hour().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum_when_tick
    1996-12-20T08:00:00.000000000,18446744073709551615,3650215962958587783,A,16.2
    1996-12-20T08:00:00.000000000,18446744073709551615,11753611437813598533,B,3.9
    1996-12-20T09:00:00.000000000,18446744073709551615,3650215962958587783,A,28.45
    1996-12-20T09:00:00.000000000,18446744073709551615,11753611437813598533,B,3.9
    1996-12-20T10:00:00.000000000,18446744073709551615,3650215962958587783,A,36.45
    1996-12-20T10:00:00.000000000,18446744073709551615,11753611437813598533,B,27.799999999999997
    1996-12-20T11:00:00.000000000,18446744073709551615,3650215962958587783,A,46.45
    1996-12-20T11:00:00.000000000,18446744073709551615,11753611437813598533,B,27.799999999999997
    "###);
}

#[tokio::test]
async fn test_when_hourly_end_on_hour_final_results() {
    insta::assert_snapshot!(QueryFixture::new("{ sum_on_hour: sum(Foo.n) | when(hourly()) }").with_final_results().run_to_csv(&data_fixture_over_hours_end_on_hour().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum_on_hour
    1996-12-20T11:00:00.000000001,18446744073709551615,3650215962958587783,A,46.45
    1996-12-20T11:00:00.000000001,18446744073709551615,11753611437813598533,B,27.799999999999997
    "###);
}

#[tokio::test]

async fn test_since_daily_over_span_of_days() {
    insta::assert_snapshot!(QueryFixture::new("{ n: Foo.n, sum_since: sum(Foo.n, window=since(daily())) }").run_to_csv(&data_fixture_over_days().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,n,sum_since
    1996-12-19T20:39:57.000000000,9223372036854775808,3650215962958587783,A,10.0,10.0
    1996-12-19T20:39:58.000000000,9223372036854775808,11753611437813598533,B,3.9,3.9
    1996-12-20T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,10.0
    1996-12-20T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,3.9
    1996-12-21T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,
    1996-12-21T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1996-12-21T00:32:59.000000000,9223372036854775808,3650215962958587783,A,6.2,6.2
    1996-12-21T00:44:00.000000000,9223372036854775808,3650215962958587783,A,9.25,15.45
    1996-12-21T00:45:01.000000000,9223372036854775808,3650215962958587783,A,3.0,18.45
    1996-12-21T08:00:00.000000000,9223372036854775808,3650215962958587783,A,8.0,26.45
    1996-12-22T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,26.45
    1996-12-22T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1996-12-22T00:25:02.000000000,9223372036854775808,11753611437813598533,B,23.9,23.9
    1996-12-22T00:30:03.000000000,9223372036854775808,3650215962958587783,A,,
    1996-12-23T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,
    1996-12-23T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,23.9
    1996-12-23T00:40:04.000000000,9223372036854775808,3650215962958587783,A,10.0,10.0
    "###);
}

#[tokio::test]
async fn test_since_monthly() {
    insta::assert_snapshot!(QueryFixture::new("{ n: Foo.n, sum_since: sum(Foo.n, window=since(monthly())) }").run_to_csv(&data_fixture_over_months().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,n,sum_since
    1996-12-19T20:39:57.000000000,9223372036854775808,3650215962958587783,A,10.0,10.0
    1996-12-19T20:39:58.000000000,9223372036854775808,11753611437813598533,B,3.9,3.9
    1997-01-01T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,10.0
    1997-01-01T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,3.9
    1997-01-21T00:32:59.000000000,9223372036854775808,3650215962958587783,A,6.2,6.2
    1997-01-21T00:44:00.000000000,9223372036854775808,3650215962958587783,A,9.25,15.45
    1997-02-01T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,15.45
    1997-02-01T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1997-02-21T00:45:01.000000000,9223372036854775808,3650215962958587783,A,3.0,3.0
    1997-03-01T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,3.0
    1997-03-01T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1997-04-01T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,
    1997-04-01T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1997-04-22T00:20:02.000000000,9223372036854775808,3650215962958587783,A,8.0,8.0
    1997-04-22T00:25:02.000000000,9223372036854775808,11753611437813598533,B,23.9,23.9
    1997-04-22T00:30:03.000000000,9223372036854775808,3650215962958587783,A,,8.0
    1997-05-01T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,8.0
    1997-05-01T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,23.9
    1997-05-23T00:40:04.000000000,9223372036854775808,3650215962958587783,A,10.0,10.0
    "###);
}

#[tokio::test]
async fn test_since_yearly() {
    insta::assert_snapshot!(QueryFixture::new("{ n: Foo.n, sum_since: sum(Foo.n, window=since(yearly())) }").run_to_csv(&data_fixture_over_years().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,n,sum_since
    1996-12-19T20:39:57.000000000,9223372036854775808,3650215962958587783,A,10.0,10.0
    1996-12-19T20:39:58.000000000,9223372036854775808,11753611437813598533,B,3.9,3.9
    1997-01-01T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,10.0
    1997-01-01T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,3.9
    1998-01-01T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,
    1998-01-01T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1998-01-21T00:32:59.000000000,9223372036854775808,3650215962958587783,A,6.2,6.2
    1998-01-21T00:44:00.000000000,9223372036854775808,3650215962958587783,A,9.25,15.45
    1999-01-01T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,15.45
    1999-01-01T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    1999-02-21T00:45:01.000000000,9223372036854775808,3650215962958587783,A,3.0,3.0
    1999-04-22T00:20:02.000000000,9223372036854775808,3650215962958587783,A,8.0,11.0
    2000-01-01T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,11.0
    2000-01-01T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    2001-01-01T00:00:00.000000000,18446744073709551615,3650215962958587783,A,,
    2001-01-01T00:00:00.000000000,18446744073709551615,11753611437813598533,B,,
    2001-04-22T00:25:02.000000000,9223372036854775808,11753611437813598533,B,23.9,23.9
    2001-04-22T00:30:03.000000000,9223372036854775808,3650215962958587783,A,,
    2001-05-23T00:40:04.000000000,9223372036854775808,3650215962958587783,A,10.0,10.0
    "###);
}

#[tokio::test]
async fn test_tick_with_when_produces_values_on_window_bounds() {
    insta::assert_snapshot!(QueryFixture::new("{ sum_when_day: sum(Foo.n, window=since(daily())) | when(daily()) }").run_to_csv(&data_fixture_over_days().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,sum_when_day
    1996-12-20T00:00:00.000000000,18446744073709551615,3650215962958587783,A,10.0
    1996-12-20T00:00:00.000000000,18446744073709551615,11753611437813598533,B,3.9
    1996-12-21T00:00:00.000000000,18446744073709551615,3650215962958587783,A,
    1996-12-21T00:00:00.000000000,18446744073709551615,11753611437813598533,B,
    1996-12-22T00:00:00.000000000,18446744073709551615,3650215962958587783,A,26.45
    1996-12-22T00:00:00.000000000,18446744073709551615,11753611437813598533,B,
    1996-12-23T00:00:00.000000000,18446744073709551615,3650215962958587783,A,
    1996-12-23T00:00:00.000000000,18446744073709551615,11753611437813598533,B,23.9
    "###);
}

#[tokio::test]
async fn test_tick_when_finished() {
    // This tests the use of `... | last() | when(finished())` as part of producing
    // final values.
    // Specifically, the discrete value `Numbers.time` will be undefined when
    // "finished", but we expect to get the most recent (new) value.
    insta::assert_snapshot!(QueryFixture::new("{ time: Numbers.time, sum: sum(Numbers.m) } | last() | when(finished())").run_to_csv(&i64_data_fixture().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,time,sum
    1996-12-20T00:40:02.000000001,18446744073709551615,3650215962958587783,A,1996-12-20T00:40:02.000000000,34
    1996-12-20T00:40:02.000000001,18446744073709551615,11753611437813598533,B,1996-12-20T00:39:58.000000000,24
    "###);
}

#[tokio::test]
async fn test_count_sliding_tick_daily() {
    insta::assert_snapshot!(QueryFixture::new("{ count: count(Foo), sliding_count: count(Foo, window=sliding(2, daily())) }").run_to_csv(&data_fixture_over_days().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,count,sliding_count
    1996-12-19T20:39:57.000000000,9223372036854775808,3650215962958587783,A,1,1
    1996-12-19T20:39:58.000000000,9223372036854775808,11753611437813598533,B,1,1
    1996-12-20T00:00:00.000000000,18446744073709551615,3650215962958587783,A,1,1
    1996-12-20T00:00:00.000000000,18446744073709551615,11753611437813598533,B,1,1
    1996-12-21T00:00:00.000000000,18446744073709551615,3650215962958587783,A,1,1
    1996-12-21T00:00:00.000000000,18446744073709551615,11753611437813598533,B,1,1
    1996-12-21T00:32:59.000000000,9223372036854775808,3650215962958587783,A,2,1
    1996-12-21T00:44:00.000000000,9223372036854775808,3650215962958587783,A,3,2
    1996-12-21T00:45:01.000000000,9223372036854775808,3650215962958587783,A,4,3
    1996-12-21T08:00:00.000000000,9223372036854775808,3650215962958587783,A,5,4
    1996-12-22T00:00:00.000000000,18446744073709551615,3650215962958587783,A,5,4
    1996-12-22T00:00:00.000000000,18446744073709551615,11753611437813598533,B,1,0
    1996-12-22T00:25:02.000000000,9223372036854775808,11753611437813598533,B,2,1
    1996-12-22T00:30:03.000000000,9223372036854775808,3650215962958587783,A,6,5
    1996-12-23T00:00:00.000000000,18446744073709551615,3650215962958587783,A,6,5
    1996-12-23T00:00:00.000000000,18446744073709551615,11753611437813598533,B,2,1
    1996-12-23T00:40:04.000000000,9223372036854775808,3650215962958587783,A,7,2
    "###);
}

#[tokio::test]
async fn test_count_daily_sliding_equivalent_to_since() {
    insta::assert_snapshot!(QueryFixture::new("{ since: count(Foo, window=since(daily())), sliding: count(Foo, window=sliding(1, daily())) }").run_to_csv(&data_fixture_over_days().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,since,sliding
    1996-12-19T20:39:57.000000000,9223372036854775808,3650215962958587783,A,1,1
    1996-12-19T20:39:58.000000000,9223372036854775808,11753611437813598533,B,1,1
    1996-12-20T00:00:00.000000000,18446744073709551615,3650215962958587783,A,1,1
    1996-12-20T00:00:00.000000000,18446744073709551615,11753611437813598533,B,1,1
    1996-12-21T00:00:00.000000000,18446744073709551615,3650215962958587783,A,0,0
    1996-12-21T00:00:00.000000000,18446744073709551615,11753611437813598533,B,0,0
    1996-12-21T00:32:59.000000000,9223372036854775808,3650215962958587783,A,1,1
    1996-12-21T00:44:00.000000000,9223372036854775808,3650215962958587783,A,2,2
    1996-12-21T00:45:01.000000000,9223372036854775808,3650215962958587783,A,3,3
    1996-12-21T08:00:00.000000000,9223372036854775808,3650215962958587783,A,4,4
    1996-12-22T00:00:00.000000000,18446744073709551615,3650215962958587783,A,4,4
    1996-12-22T00:00:00.000000000,18446744073709551615,11753611437813598533,B,0,0
    1996-12-22T00:25:02.000000000,9223372036854775808,11753611437813598533,B,1,1
    1996-12-22T00:30:03.000000000,9223372036854775808,3650215962958587783,A,1,1
    1996-12-23T00:00:00.000000000,18446744073709551615,3650215962958587783,A,1,1
    1996-12-23T00:00:00.000000000,18446744073709551615,11753611437813598533,B,1,1
    1996-12-23T00:40:04.000000000,9223372036854775808,3650215962958587783,A,1,1
    "###);
}

#[tokio::test]
async fn test_max_subsort_input_merges_correctly() {
    insta::assert_snapshot!(QueryFixture::new("{ field: count(Foo, window=since(daily())) | count(window=since(daily())) }").run_to_csv(&data_fixture_over_days().await).await.unwrap(), @r###"
    _time,_subsort,_key_hash,_key,field
    1996-12-19T20:39:57.000000000,9223372036854775808,3650215962958587783,A,1
    1996-12-19T20:39:58.000000000,9223372036854775808,11753611437813598533,B,1
    1996-12-20T00:00:00.000000000,18446744073709551615,3650215962958587783,A,2
    1996-12-20T00:00:00.000000000,18446744073709551615,11753611437813598533,B,2
    1996-12-21T00:00:00.000000000,18446744073709551615,3650215962958587783,A,1
    1996-12-21T00:00:00.000000000,18446744073709551615,11753611437813598533,B,1
    1996-12-21T00:32:59.000000000,9223372036854775808,3650215962958587783,A,1
    1996-12-21T00:44:00.000000000,9223372036854775808,3650215962958587783,A,2
    1996-12-21T00:45:01.000000000,9223372036854775808,3650215962958587783,A,3
    1996-12-21T08:00:00.000000000,9223372036854775808,3650215962958587783,A,4
    1996-12-22T00:00:00.000000000,18446744073709551615,3650215962958587783,A,5
    1996-12-22T00:00:00.000000000,18446744073709551615,11753611437813598533,B,1
    1996-12-22T00:25:02.000000000,9223372036854775808,11753611437813598533,B,1
    1996-12-22T00:30:03.000000000,9223372036854775808,3650215962958587783,A,1
    1996-12-23T00:00:00.000000000,18446744073709551615,3650215962958587783,A,2
    1996-12-23T00:00:00.000000000,18446744073709551615,11753611437813598533,B,2
    1996-12-23T00:40:04.000000000,9223372036854775808,3650215962958587783,A,1
    "###);
}

#[tokio::test]
#[ignore = "misused tick causes panic"]
async fn test_misused_ticks() {
    insta::assert_snapshot!(QueryFixture::new("let agg_level = hourly() in { sum_n: sum(Foo.n, window=since(agg_level)) }").run_to_csv(&data_fixture_over_days().await).await.unwrap(), @"");
}
