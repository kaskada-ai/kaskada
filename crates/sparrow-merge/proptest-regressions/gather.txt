# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 163b1be874da00bc42e308ac02841df0bf19e520e3f672ad32126929663780e8 # shrinks to a = Batch { data: Some(BatchInfo { data: StructArray [ -- child 0: "time" (Timestamp(Nanosecond, None)) PrimitiveArray<Timestamp(Nanosecond, None)> [   1970-01-01T00:00:00,   1970-01-01T00:00:00, ] -- child 1: "key_hash" (UInt64) PrimitiveArray<UInt64> [   0,   0, ] ], time: PrimitiveArray<Timestamp(Nanosecond, None)> [   1970-01-01T00:00:00,   1970-01-01T00:00:00, ], subsort: PrimitiveArray<UInt64> [   0,   1, ], key_hash: PrimitiveArray<UInt64> [   0,   0, ], min_present_time: RowTime(0), max_present_time: RowTime(0) }), up_to_time: RowTime(0) }, b = Batch { data: Some(BatchInfo { data: StructArray [ -- child 0: "time" (Timestamp(Nanosecond, None)) PrimitiveArray<Timestamp(Nanosecond, None)> [   1970-01-01T00:00:00,   1970-01-01T00:00:00.000000001, ] -- child 1: "key_hash" (UInt64) PrimitiveArray<UInt64> [   0,   0, ] ], time: PrimitiveArray<Timestamp(Nanosecond, None)> [   1970-01-01T00:00:00,   1970-01-01T00:00:00.000000001, ], subsort: PrimitiveArray<UInt64> [   0,   1, ], key_hash: PrimitiveArray<UInt64> [   0,   0, ], min_present_time: RowTime(0), max_present_time: RowTime(1) }), up_to_time: RowTime(1) }
cc f637f8e6e741c6c0d9e479192770bf4e4e4e9f6832b801dff6214cbfecb6c0ce # shrinks to a = Batch { data: Some(BatchInfo { data: StructArray [ -- child 0: "time" (Timestamp(Nanosecond, None)) PrimitiveArray<Timestamp(Nanosecond, None)> [   1970-01-01T00:00:00.000000001,   1970-01-01T00:00:00.000000001, ] -- child 1: "key_hash" (UInt64) PrimitiveArray<UInt64> [   0,   0, ] ], time: PrimitiveArray<Timestamp(Nanosecond, None)> [   1970-01-01T00:00:00.000000001,   1970-01-01T00:00:00.000000001, ], subsort: PrimitiveArray<UInt64> [   0,   1, ], key_hash: PrimitiveArray<UInt64> [   0,   0, ], min_present_time: RowTime(1), max_present_time: RowTime(1) }), up_to_time: RowTime(1) }, b = Batch { data: Some(BatchInfo { data: StructArray [ -- child 0: "time" (Timestamp(Nanosecond, None)) PrimitiveArray<Timestamp(Nanosecond, None)> [   1970-01-01T00:00:00,   1970-01-01T00:00:00, ] -- child 1: "key_hash" (UInt64) PrimitiveArray<UInt64> [   0,   0, ] ], time: PrimitiveArray<Timestamp(Nanosecond, None)> [   1970-01-01T00:00:00,   1970-01-01T00:00:00, ], subsort: PrimitiveArray<UInt64> [   0,   1, ], key_hash: PrimitiveArray<UInt64> [   0,   0, ], min_present_time: RowTime(0), max_present_time: RowTime(0) }), up_to_time: RowTime(0) }
